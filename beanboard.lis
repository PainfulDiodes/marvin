beanboard.asm:
     1                          ; MARVIN build for BeanZee with BeanBoard
     2                          ; https://github.com/PainfulDiodes/BeanZee
     3                          ; https://github.com/PainfulDiodes/BeanBoard
     4                          
     5                          BEANBOARD EQU 1
     6                          
     7                          include "asm/main.inc"
asm/main.inc:
     1                          ; start of user RAM
     2                          RAMSTART equ 0x8000
     3                          
     4                          ; 8-byte status area
     5                          CONSOLE_STATUS equ 0xf000
     6                          ; 8-byte keyscan buffer
     7                          KEY_MATRIX_BUFFER equ 0xf010
     8                          ; command buffer
     9                          CMD_BUFFER equ 0xf020
    10                          ; this should really be 0x0000 as the CPU will dec SP before PUSH
    11                          STACK equ 0xffff
    12                          
    13                          UM245R_CTRL equ 0 ; serial control port
    14                          UM245R_DATA equ 1 ; serial data port
    15                          KEYSCAN_OUT equ 2 ; either 2 or 3 will work
    16                          KEYSCAN_IN  equ 3 ; either 2 or 3 will work
    17                          LCD_CTRL    equ 4 ; LCD control port
    18                          LCD_DATA    equ 5 ; LCD data port
    19                          GPIO_OUT    equ 6 ; either 6 or 7 will work
    20                          GPIO_IN     equ 7 ; either 6 or 7 will work
    21                          
    22                          CONSOLE_STATUS_USB equ 1
    23                          CONSOLE_STATUS_BEANBOARD equ 2
    24                          
beanboard.asm:
     8                          include "asm/escapestring.inc"
asm/escapestring.inc:
     1                          ; escape character constants for assembler compatibility
     2                          ; sjasmplus requires double quotes around escape sequences: "\n" and would not interpret '\n' but truncate
     3                          ; z88dk-z80asm requires single quotes around so would correctly interpret '\n' but reject "\n"
     4                          
     5                          ESC_B equ 0x08 ; \b
     6                          ESC_T equ 0x09 ; \t
     7                          ESC_N equ 0x0a ; \n
     8                          ESC_R equ 0x0d ; \r
     9                          ESC_E equ 0x1b ; \e
    10                          SLASH equ 0x5c ; \\
    11                          QUOTE equ 0x27 ; \'
    12                          
beanboard.asm:
     9                          include "asm/HD44780LCD.inc"
asm/HD44780LCD.inc:
     1                          ; LCD commands
     2                          LCD_CLEAR_DISPLAY equ 0x01
     3                          LCD_RETURN_HOME equ 0x02
     4                          LCD_ENTRY_MODE_SET equ 0x04
     5                          LCD_DISPLAY_ON_OFF_CONTROL equ 0x08
     6                          LCD_CURSOR_DISPLAY_SHIFT equ 0x10
     7                          LCD_FUNCTION_SET equ 0x20
     8                          LCD_SET_CGRAM_ADDR equ 0x40
     9                          LCD_SET_DDRAM_ADDR equ 0x80
    10                          
    11                          ; LCD_ENTRY_MODE_SET options
    12                          LCD_ENTRY_INC equ 0x02 ; left
    13                          LCD_ENTRY_DEC equ 0x00 ; right
    14                          LCD_ENTRY_SHIFT equ 0x01
    15                          LCD_ENTRY_NO_SHIFT equ 0x00
    16                          
    17                          ; LCD_DISPLAY_ON_OFF_CONTROL options
    18                          LCD_DISPLAY_ON equ 0x04
    19                          LCD_DISPLAY_OFF equ 0x00
    20                          LCD_CURSOR_ON equ 0x02
    21                          LCD_CURSOR_OFF equ 0x00
    22                          LCD_BLINK_ON equ 0x01
    23                          LCD_BLINK_OFF equ 0x00
    24                          
    25                          ; LCD_CURSOR_DISPLAY_SHIFT options
    26                          LCD_SHIFT_DISPLAY equ 0x08
    27                          LCD_SHIFT_CURSOR equ 0x00
    28                          LCD_SHIFT_RIGHT equ 0x04
    29                          LCD_SHIFT_LEFT equ 0x00
    30                          
    31                          ; LCD_FUNCTION_SET options
    32                          LCD_DATA_LEN_8 equ 0x10
    33                          LCD_DATA_LEN_4 equ 0x00
    34                          LCD_DISP_LINES_2 equ 0x08
    35                          LCD_DISP_LINES_1 equ 0x00
    36                          LCD_FONT_10 equ 0x04
    37                          LCD_FONT_8 equ 0x00
    38                          
    39                          LCD_LINE_LEN equ 0x14
    40                          LCD_NUM_LINES equ 4
    41                          LCD_BUFFER_LEN equ LCD_LINE_LEN*LCD_NUM_LINES
    42                          
    43                          ; LCD_SET_DDRAM_ADDR options
    44                          LCD_LINE_0_ADDR equ 0x00
    45                          LCD_LINE_1_ADDR equ 0x40
    46                          LCD_LINE_2_ADDR equ 0x00+LCD_LINE_LEN
    47                          LCD_LINE_3_ADDR equ 0x40+LCD_LINE_LEN
    48                          LCD_EOL_0 equ 0x00+LCD_LINE_LEN-1
    49                          LCD_EOL_1 equ 0x40+LCD_LINE_LEN-1
    50                          LCD_EOL_2 equ 0x00+LCD_LINE_LEN*2-1
    51                          LCD_EOL_3 equ 0x40+LCD_LINE_LEN*2-1
    52                          
beanboard.asm:
    10                          include "asm/main.asm"
asm/main.asm:
     1                          IFDEF ORGDEF
     2                              ORG ORGDEF
     3                          ELSE
     4                              ORG 0x0000
     5                          ENDIF
     6                          
     7  0000  31ffff                ld sp, STACK
     8  0003  cd6f00                call console_init
     9                          IF BEANBOARD
    10  0006  cd6002                call lcd_init
    11                          ENDIF
    12  0009  c3d000                jp START
    13                          
beanboard.asm:
    11                          include "asm/console.asm"
asm/console.asm:
     1  000c  00000000          ALIGN 0x10
     2                          
     3                          ; wait for a character and return in A
     4                          getchar:
     5  0010  cd2000                call readchar
     6  0013  fe00                  cp 0
     7  0015  c0                    ret nz
     8  0016  18f8                  jr getchar
     9                          
    10  0018  0000000000000000  ALIGN 0x10
    11                          
    12                          ; read a character from the console and return in A - return 0 if there is no character
    13                          readchar:
    14  0020  e5                    push hl
    15  0021  2100f0                ld hl,CONSOLE_STATUS
    16  0024  3e02                  ld a,CONSOLE_STATUS_BEANBOARD
    17  0026  a6                    and (hl)
    18  0027  2007                  jr nz,_readchar_beanboard
    19  0029  3e01                  ld a,CONSOLE_STATUS_USB
    20  002b  a6                    and (hl)
    21  002c  2007                  jr nz,_readchar_usb
    22  002e  1808                  jr _readchar_end
    23                          _readchar_beanboard:
    24  0030  cd7003                call key_readchar
    25  0033  1803                  jr _readchar_end
    26                          _readchar_usb:
    27  0035  cd9000                call usb_readchar
    28                          _readchar_end:
    29  0038  e1                    pop hl
    30  0039  c9                    ret
    31                          
    32  003a  000000000000      ALIGN 0x10
    33                          
    34                          ; sent character in A to the console
    35                          putchar:
    36  0040  e5                    push hl
    37  0041  c5                    push bc
    38  0042  47                    ld b,a
    39  0043  2100f0                ld hl,CONSOLE_STATUS
    40  0046  3e02                  ld a,CONSOLE_STATUS_BEANBOARD
    41  0048  a6                    and (hl)
    42  0049  2007                  jr nz,_putchar_beanboard
    43  004b  3e01                  ld a,CONSOLE_STATUS_USB
    44  004d  a6                    and (hl)
    45  004e  2008                  jr nz,_putchar_usb
    46  0050  180a                  jr _putchar_end
    47                          _putchar_beanboard:
    48  0052  78                    ld a,b
    49  0053  cda002                call lcd_putchar
    50  0056  1804                  jr _putchar_end
    51                          _putchar_usb:
    52  0058  78                    ld a,b
    53  0059  cdb000                call usb_putchar
    54                          _putchar_end:
    55  005c  78                    ld a,b
    56  005d  c1                    pop bc
    57  005e  e1                    pop hl
    58  005f  c9                    ret
    59                          
    60                          ALIGN 0x10
    61                          
    62                          ; print a zero-terminated string pointed to by hl to the console
    63                          puts:
    64  0060  e5                    push hl
    65                          _puts_loop:
    66                              ; get character from string
    67  0061  7e                    ld a,(hl)
    68                              ; is it zero?
    69  0062  fe00                  cp 0
    70                              ; yes
    71  0064  2807                  jr z, _puts_end
    72                              ; no: send character
    73  0066  cd4000                call putchar
    74                              ; next character position
    75  0069  23                    inc hl
    76                              ; loop for next character
    77  006a  c36100                jp _puts_loop
    78                          _puts_end:
    79  006d  e1                    pop hl
    80  006e  c9                    ret
    81                          
    82                          IF BEANBOARD
    83                          ; determine which console should be active - Reset=beanboard, shift-Reset=USB
    84                          console_init:
    85                              ; check for modifier keys being held down
    86  006f  cdb003                call modifierkeys
    87                              ; shift key down?
    88  0072  e601                  and MOD_KEY_SHIFT
    89  0074  c27e00                jp nz,_console_init_usb
    90                          ;_console_init_beanboard:
    91  0077  3e02                  ld a,CONSOLE_STATUS_BEANBOARD
    92  0079  2100f0                ld hl,CONSOLE_STATUS
    93  007c  77                    ld (hl),a
    94  007d  c9                    ret
    95                          _console_init_usb:
    96  007e  3e01                  ld a,CONSOLE_STATUS_USB
    97  0080  2100f0                ld hl,CONSOLE_STATUS
    98  0083  77                    ld (hl),a
    99  0084  c9                    ret
   100                          ELSE
   101                          ; USB is the active console
   102                          console_init:
   103                              ld a,CONSOLE_STATUS_USB
   104                              ld hl,CONSOLE_STATUS
   105                              ld (hl),a
   106                              ret
   107                          ENDIF
   108                          
beanboard.asm:
    12                          include "asm/UM245R.asm"
asm/UM245R.asm:
     1                          ; It is assumed that UM245R status signals are gated to the data bus as an IO port where:
     2                          ; /TXE = bit 0
     3                          ; /RXF = bit 1
     4                          ; As per:
     5                          ; https://github.com/PainfulDiodes/z80-breadboard-computer
     6                          ;
     7                          ; line endings are translated:
     8                          ; incoming line endings from the terminal are expected to be \r
     9                          ; and are tranlslated to \n
    10                          ; (\r\n would count as 2 line endings)
    11                          ; and outgoing line endings are sent as \r\n
    12                          ; externally this is consistent with VT100/ANSI terminal behaviour
    13                          ; and internally line endings are always \n
    14                          
    15  0085  0000000000000000  ALIGN 0x10
              000000            
    16                          
    17                          ; get character and return in A
    18                          usb_readchar:
    19                              ; get the USB status
    20  0090  db00                  in a,(UM245R_CTRL)
    21                              ; data to read? (active low)
    22  0092  cb4f                  bit 1,a
    23                              ; no, the buffer is empty
    24  0094  2008                  jr nz,_usb_no_char
    25                              ; yes, read the received char
    26  0096  db01                  in a,(UM245R_DATA)
    27                              ; is CR?
    28  0098  fe0d                  cp ESC_R
    29                              ; no:
    30  009a  c0                    ret nz
    31                              ; yes: convert CR to LF
    32  009b  3e0a                  ld a, ESC_N
    33  009d  c9                    ret
    34                          _usb_no_char:
    35  009e  3e00                  ld a,0
    36  00a0  c9                    ret
    37                          
    38  00a1  0000000000000000  ALIGN 0x10
              00000000000000    
    39                          
    40                          usb_putchar:
    41                              ; newline?
    42  00b0  fe0a                  cp ESC_N
    43                              ; no: just send the char
    44  00b2  2007                  jr nz,_do_usb_put
    45  00b4  3e0d                  ld a, ESC_R
    46  00b6  cdbf00                call _usb_put
    47  00b9  3e0a                  ld a, ESC_N
    48                          _do_usb_put:
    49  00bb  cdbf00                call _usb_put
    50  00be  c9                    ret
    51                          
    52                          ; transmit character in A
    53                          _usb_put:
    54  00bf  c5                    push bc
    55                              ; stash the transmit character
    56  00c0  47                    ld b,a
    57                          _usb_put_loop:
    58                              ; get the USB status
    59  00c1  db00                  in a,(UM245R_CTRL)
    60                              ; ready to transmit? (active low)
    61  00c3  cb47                  bit 0,a
    62                              ; no: bit is high
    63  00c5  20fa                  jr nz,_usb_put_loop
    64                              ; yes: restore the stashed transmit character
    65  00c7  78                    ld a,b
    66                              ; transmit the character
    67  00c8  d301                  out (UM245R_DATA),a
    68  00ca  c1                    pop bc
    69  00cb  c9                    ret
    70                          
beanboard.asm:
    13                          include "asm/marvin.asm"
asm/marvin.asm:
     1                          ; ****************************************************
     2                          ; *  Marvin - a Z80 homebrew monitor program
     3                          ; * (c) Stephen Willcock 2024
     4                          ; * https://github.com/PainfulDiodes
     5                          ; ****************************************************
     6                          
     7                          ; MAIN PROGRAM LOOP
     8                          
     9  00cc  00000000          ALIGN 0x10
    10                          
    11                          START:
    12                              ; point DE to zero - this is the default address argument for commands
    13  00d0  110000                ld de,0x0000
    14                          
    15  00d3  216004                ld hl,welcome_msg
    16  00d6  cd6000                call puts
    17                          
    18  00d9  00000000000000    ALIGN 0x10
    19                          
    20                          PROMPT:
    21                              ; point HL to the beginning of the input buffer
    22  00e0  2120f0                ld hl,CMD_BUFFER
    23  00e3  3e3e                  ld a,'>'
    24  00e5  cd4000                call putchar
    25                          
    26                          _get_cmd:
    27                              ; get character from console
    28  00e8  cd1000                call getchar
    29                              ; echo the character to console
    30  00eb  cd4000                call putchar
    31                              ; is CR?
    32  00ee  fe0d                  cp ESC_R
    33                              ; yes: skip this
    34  00f0  28f6                  jr z,_get_cmd
    35                              ; is tab?
    36  00f2  fe09                  cp ESC_T
    37                              ; yes: skip this
    38  00f4  28f2                  jr z,_get_cmd
    39                              ; is space?
    40  00f6  fe20                  cp ' '
    41                              ; yes - skip this
    42  00f8  28ee                  jr z,_get_cmd
    43                              ; escape?
    44  00fa  fe1b                  cp ESC_E
    45                              ; yes
    46  00fc  2808                  jr z, _get_cmd_esc
    47                              ; end of line?
    48  00fe  fe0a                  cp ESC_N
    49                              ; yes
    50  0100  280b                  jr z, _get_cmd_end
    51                              ; no: add character to the buffer
    52  0102  77                    ld(hl),a
    53                              ; move pointer to next buffer location - we're not checking for overrun
    54  0103  23                    inc hl
    55                              ; next character
    56  0104  18e2                  jr _get_cmd
    57                              ; do escape
    58                          _get_cmd_esc:
    59                              ; new line
    60  0106  3e0a                  ld a,ESC_N
    61  0108  cd4000                call putchar
    62                              ; back to prompt
    63  010b  18d3                  jr PROMPT
    64                          _get_cmd_end:
    65                              ; string terminator
    66  010d  3e00                  ld a,0
    67                              ; add terminator to end of buffer
    68  010f  77                    ld(hl),a
    69                          ; process command from buffer
    70                              ; point to start of buffer
    71  0110  2120f0                ld hl,CMD_BUFFER
    72                              ; load character from buffer
    73  0113  7e                    ld a,(hl)
    74                              ; end of string?
    75  0114  fe00                  cp 0
    76                              ; yes - empty line - go back to prompt
    77  0116  28c8                  jr z,PROMPT
    78                              ; advance the buffer pointer
    79  0118  23                    inc hl
    80  0119  fe72                  cp 'r'
    81  011b  2815                  jr z,_cmd_read
    82  011d  fe77                  cp 'w'
    83  011f  2847                  jr z,_cmd_write
    84  0121  fe78                  cp 'x'
    85  0123  2868                  jr z,_cmd_execute
    86                              ; ':' = load from intel hex format
    87  0125  fe3a                  cp ':'
    88  0127  2879                  jr z,_cmd_load
    89                              ; otherwise error
    90  0129  219004                ld hl,bad_cmd_msg
    91  012c  cd6000                call puts
    92                              ; loop back to the prompt
    93  012f  c3e000                jp PROMPT
    94                          
    95                          ; COMMANDS
    96                          
    97                          ; READ
    98                          ; read bytes from memory and send hex values to console
    99                          _cmd_read:
   100                              ; load character from buffer
   101  0132  7e                    ld a,(hl)
   102                              ; end of string?
   103  0133  fe00                  cp 0
   104                              ; yes: no address argument, so skip to read row
   105  0135  2808                  jr z, _cmd_read_row
   106                              ; parse first pair of characters
   107  0137  cde001                call hex_byte_val
   108                              ; load into upper byte of memory pointer
   109  013a  57                    ld d,a
   110                              ; parse second pair of characters
   111  013b  cde001                call hex_byte_val
   112                              ; load into lower byte of memory pointer
   113  013e  5f                    ld e,a
   114                          _cmd_read_row:
   115                              ; initialise byte counter - each row will have this many bytes
   116  013f  0e10                  ld c, 0x10
   117                              ; print DE content: the read address
   118  0141  7a                    ld a,d
   119  0142  cd3002                call putchar_hex
   120  0145  7b                    ld a,e
   121  0146  cd3002                call putchar_hex
   122                              ; separator between address and data
   123  0149  3e3a                  ld a,':'
   124  014b  cd4000                call putchar
   125  014e  3e20                  ld a,' '
   126  0150  cd4000                call putchar
   127                              ; get a byte
   128                          _cmd_read_byte:
   129  0153  1a                    ld a,(de)
   130                              ; and print it
   131  0154  cd3002                call putchar_hex
   132                              ; add space between bytes
   133  0157  3e20                  ld a,' '
   134  0159  cd4000                call putchar
   135                              ; next address
   136  015c  13                    inc de
   137                              ; reduce byte counter
   138                              ; TODO djnz ?
   139  015d  0d                    dec c
   140                              ; repeat if the counter is not 0
   141  015e  20f3                  jr nz, _cmd_read_byte
   142                              ; otherwise, new line
   143  0160  3e0a                  ld a,ESC_N
   144  0162  cd4000                call putchar
   145                              ; and back to prompt
   146  0165  c3e000                jp PROMPT
   147                          
   148                          ; WRITE
   149                          
   150                          ; write bytes to memory interpreting hex values from console
   151                          _cmd_write:
   152                              ; load character from buffer
   153  0168  7e                    ld a,(hl)
   154                              ; end of string?
   155  0169  fe00                  cp 0
   156                              ; yes: no data
   157  016b  2817                  jr z, _cmd_write_null
   158                              ; parse first pair of characters - address high
   159  016d  cde001                call hex_byte_val
   160                              ; load into upper byte of memory pointer
   161  0170  57                    ld d,a
   162                              ; parse second pair of characters - address low
   163  0171  cde001                call hex_byte_val
   164                              ; load into lower byte of memory pointer
   165  0174  5f                    ld e,a
   166                          _cmd_write_data:
   167                              ; load character from buffer
   168  0175  7e                    ld a,(hl)
   169                              ; end of string?
   170  0176  fe00                  cp 0
   171                              ; yes: we're done
   172  0178  2807                  jr z, _cmd_write_end
   173                              ; parse data byte
   174  017a  cde001                call hex_byte_val
   175                              ; write byte to memory
   176  017d  12                    ld (de),a
   177                              ; advance destination pointer
   178  017e  13                    inc de
   179  017f  18f4                  jr _cmd_write_data
   180                          _cmd_write_end:
   181  0181  c3e000                jp PROMPT
   182                              ; w with no data
   183                          _cmd_write_null:
   184  0184  21a004                ld hl,cmd_w_null_msg
   185  0187  cd6000                call puts
   186                              ; and back to prompt
   187  018a  c3e000                jp PROMPT
   188                          
   189                          ; EXECUTE
   190                          
   191                          ; start executing from given address
   192                          _cmd_execute:
   193                              ; load character from buffer
   194  018d  7e                    ld a,(hl)
   195                              ; end of string?
   196  018e  fe00                  cp 0
   197                              ; yes - no data
   198  0190  ca9e01                jp z, _cmd_exec_df
   199                              ; parse first pair of characters - address high
   200  0193  cde001                call hex_byte_val
   201                              ; load into upper byte of memory pointer
   202  0196  57                    ld d,a
   203                              ; parse second pair of characters - address low
   204  0197  cde001                call hex_byte_val
   205                              ; load into lower byte of memory pointer
   206  019a  5f                    ld e,a
   207  019b  626b                  ld hl,de
   208                              ; execute from address
   209  019d  e9                    jp (hl)
   210                              ; start executing from default address
   211                          _cmd_exec_df:
   212  019e  210080                ld hl,RAMSTART
   213                              ; execute from address
   214  01a1  e9                    jp (hl)
   215                          
   216                          ; LOAD
   217                          
   218                          ; load from INTEL HEX - records are read from the buffer
   219                          _cmd_load:
   220                              ; load character from buffer
   221  01a2  7e                    ld a,(hl)
   222                              ; end of string?
   223  01a3  fe00                  cp 0
   224                              ; yes: no data - quit
   225  01a5  cace01                jp z, _cmd_load_end
   226                              ; parse first pair of characters - byte count
   227  01a8  cde001                call hex_byte_val
   228  01ab  fe00                  cp 0
   229                              ; yes - zero byte count - quit
   230  01ad  cace01                jp z, _cmd_load_end
   231                              ; load byte count into C
   232  01b0  4f                    ld c,a
   233                              ; parse address high
   234  01b1  cde001                call hex_byte_val
   235                              ; load into upper byte of memory pointer
   236  01b4  57                    ld d,a
   237                              ; parse address low
   238  01b5  cde001                call hex_byte_val
   239                              ; load into lower byte of memory pointer
   240  01b8  5f                    ld e,a
   241                              ; parse record type
   242  01b9  cde001                call hex_byte_val
   243                              ; record type zero?
   244  01bc  fe00                  cp 0
   245                              ; no: quit
   246  01be  c2ce01                jp nz, _cmd_load_end
   247                          _cmd_load_data:
   248                              ; load character from buffer
   249  01c1  7e                    ld a,(hl)
   250                              ; end of string?
   251  01c2  fe00                  cp 0
   252                              ; yes: we're done
   253  01c4  2808                  jr z, _cmd_load_end
   254                              ; no:
   255                              ; parse data byte
   256  01c6  cde001                call hex_byte_val
   257                              ; write byte to memory
   258  01c9  12                    ld (de),a
   259                              ; advance destination pointer
   260  01ca  13                    inc de
   261                              ; decrement byte counter
   262                              ; TODO djnz
   263  01cb  0d                    dec c
   264                              ; if byte counter not zero then go again
   265  01cc  20f3                  jr nz,_cmd_load_data
   266                          _cmd_load_end:
   267  01ce  c3e000                jp PROMPT
   268                          
beanboard.asm:
    14                          include "asm/strings.asm"
asm/strings.asm:
     1                          ; string subroutines
     2                          
     3  01d1  0000000000000000  ALIGN 0x10
              00000000000000    
     4                          
     5                          ; read 2 ASCII hex chars from memory by HL pointer, return converted value in A and advance HL pointer
     6                          hex_byte_val:
     7                              ; preserve BC
     8  01e0  c5                    push bc
     9                              ; load 1st character from memory
    10  01e1  7e                    ld a,(hl)
    11                              ; end of string?
    12  01e2  fe00                  cp 0
    13                              ; yes: no value - return zero
    14  01e4  2819                  jr z,_hex_byte_val_zero
    15                              ; no:
    16                              ; advance the buffer pointer
    17  01e6  23                    inc hl
    18                              ; convert first hex digit
    19  01e7  cd1002                call hex_val
    20                              ; shift left 4 bits to put value into top nibble
    21  01ea  cb27                  sla a
    22  01ec  cb27                  sla a
    23  01ee  cb27                  sla a
    24  01f0  cb27                  sla a
    25                              ; cache the result
    26  01f2  47                    ld b,a
    27                              ; load 2nd character from memory
    28  01f3  7e                    ld a,(hl)
    29                              ; end of string?
    30  01f4  fe00                  cp 0
    31                              ; yes: incomplete byte - return zero
    32  01f6  2807                  jr z,_hex_byte_val_zero
    33                              ; advance the buffer pointer
    34  01f8  23                    inc hl
    35                              ; and convert 2nd hex digit
    36  01f9  cd1002                call hex_val
    37                              ; add first and second digits
    38  01fc  80                    add a,b
    39                              ; restore BC
    40  01fd  c1                    pop bc
    41  01fe  c9                    ret
    42                          _hex_byte_val_zero:
    43                              ; zero return value
    44  01ff  3e00                  ld a,0
    45                              ; restore BC
    46  0201  c1                    pop bc
    47  0202  c9                    ret
    48                          
    49  0203  0000000000000000  ALIGN 0x10
              0000000000        
    50                          
    51                          ; convert an ASCII hex char in A to a number value (lower 4 bits)
    52                          hex_val:
    53                              ; is it lowercase alphabetic?
    54  0210  fe61                  cp 'a'
    55                              ; no: uppercase/numeric
    56  0212  3803                  jr c,_hex_val_u_n
    57                              ; yes: alphabetic
    58  0214  d657                  sub 'a'-0x0a
    59  0216  c9                    ret
    60                          _hex_val_u_n:
    61                              ; is it uppercase alphabetic?
    62  0217  fe41                  cp 'A'
    63                              ; no: numeric
    64  0219  3803                  jr c,_hex_val_n
    65                              ; y:
    66  021b  d637                  sub 'A'-0x0a
    67  021d  c9                    ret
    68                          _hex_val_n:
    69                              ; numeric
    70  021e  d630                  sub '0'
    71  0220  c9                    ret
    72                          
    73  0221  0000000000000000  ALIGN 0x10
              00000000000000    
    74                          
    75                          ; convert value in A into an ASCII pair and send to console
    76                          putchar_hex:
    77  0230  f5                    push af
    78  0231  c5                    push bc
    79                              ; stash in B
    80  0232  47                    ld b,a
    81                              ; shift A right x4 e.g. transform 10110010 to 00001011
    82  0233  cb3f                  srl a
    83  0235  cb3f                  srl a
    84  0237  cb3f                  srl a
    85  0239  cb3f                  srl a
    86                              ; most significant digit
    87  023b  cd4702                call _putchar_hex_dgt
    88                              ; recover from stash
    89  023e  78                    ld a,b
    90                              ; clear the top 4 bits
    91  023f  e60f                  and 0b00001111
    92                              ; least significant digit
    93  0241  cd4702                call _putchar_hex_dgt
    94  0244  c1                    pop bc
    95  0245  f1                    pop af
    96  0246  c9                    ret
    97                          _putchar_hex_dgt:
    98                              ; is it an alpha or numeric?
    99  0247  fe0a                  cp 0x0a
   100                              ; numeric
   101  0249  3806                  jr c,_putchar_hex_n
   102                              ; alpha
   103                              ; for alpha add the base ascii for 'a' but then sub 10 / 0x0a as hex 'a' = 10d
   104  024b  c657                  add a,'a'-0x0a
   105  024d  cd4000                call putchar
   106  0250  c9                    ret
   107                          _putchar_hex_n:
   108                              ; for numeric add the base ascii for '0'
   109  0251  c630                  add a,'0'
   110  0253  cd4000                call putchar
   111  0256  c9                    ret
   112                          
beanboard.asm:
    15                          include "asm/HD44780LCD.asm"
asm/HD44780LCD.asm:
     1                          LCD_COMMAND_0 equ LCD_FUNCTION_SET+LCD_DATA_LEN_8+LCD_DISP_LINES_2+LCD_FONT_8
     2                          LCD_COMMAND_1 equ LCD_DISPLAY_ON_OFF_CONTROL+LCD_DISPLAY_ON+LCD_CURSOR_ON+LCD_BLINK_ON
     3                          
     4  0257  0000000000000000  ALIGN 0x10
              00                
     5                          
     6                          ; initialise LCD
     7                          lcd_init:
     8                          ; preserve registers
     9  0260  f5                    push af
    10                          ; intitialise device
    11  0261  3e38              	ld a,LCD_COMMAND_0
    12  0263  cd8002            	call lcd_putcmd
    13  0266  3e0f              	ld a,LCD_COMMAND_1
    14  0268  cd8002            	call lcd_putcmd
    15  026b  3e01              	ld a,LCD_CLEAR_DISPLAY
    16  026d  cd8002            	call lcd_putcmd
    17  0270  3e00                  ld a,0
    18  0272  cda002                call lcd_putchar
    19                          ; restore registers
    20  0275  f1                    pop af
    21  0276  c9                    ret
    22                          
    23  0277  0000000000000000  ALIGN 0x10
              00                
    24                          
    25                          ; transmit character in A to the LCD control port
    26                          lcd_putcmd:
    27  0280  c5                    push bc
    28                          ; save the transmit character
    29  0281  47                    ld b,a
    30                          _lcd_putcmd_loop:
    31                          ; get the LCD status
    32  0282  db04                  in a,(LCD_CTRL)
    33                          ; busy ?
    34  0284  cb7f                  bit 7,a
    35                          ; yes
    36  0286  20fa                  jr nz,_lcd_putcmd_loop
    37                          ; no, restore the transmit character
    38  0288  78                    ld a,b
    39                          ; transmit the character
    40  0289  d304                  out (LCD_CTRL),a
    41  028b  c1                    pop bc
    42  028c  c9                    ret
    43                          
    44  028d  000000            ALIGN 0x10
    45                          
    46                          ; get character from LCD data port and return in A
    47                          lcd_getchar:
    48                          ; get the LCD status
    49  0290  db04                  in a,(LCD_CTRL)
    50                          ; busy ?
    51  0292  cb7f                  bit 7,a
    52                          ; yes
    53  0294  20fa                  jr nz,lcd_getchar
    54                          ; no, get a character
    55  0296  db05                  in a,(LCD_DATA)
    56  0298  c9                    ret
    57                          
    58  0299  00000000000000    ALIGN 0x10
    59                          
    60                          ; transmit character in A to the LCD data port
    61                          lcd_putchar:
    62                              ; newline char?
    63  02a0  fe0a                  cp ESC_N
    64  02a2  c2c002                jp nz,_lcd_putchar_printable
    65                              ; newline - fill out the line until EOL
    66                          _lcd_putchar_pad:
    67  02a5  3e20                  ld a,' '
    68  02a7  cd0003                call lcd_putdata
    69  02aa  fe13                  cp LCD_EOL_0
    70  02ac  cada02                jp z,_lcd_putchar_eol0
    71  02af  fe53                  cp LCD_EOL_1
    72  02b1  cae102                jp z,_lcd_putchar_eol1
    73  02b4  fe27                  cp LCD_EOL_2
    74  02b6  cae802                jp z,_lcd_putchar_eol2
    75  02b9  fe67                  cp LCD_EOL_3
    76  02bb  caef02                jp z,_lcd_putchar_eol3
    77                              ; loop until EOL
    78  02be  18e5                  jr _lcd_putchar_pad
    79                          _lcd_putchar_printable:
    80  02c0  cd0003                call lcd_putdata
    81                              ; check for overflow - DDRAM address returned in A
    82  02c3  fe13                  cp LCD_EOL_0
    83  02c5  cada02                jp z,_lcd_putchar_eol0
    84  02c8  fe53                  cp LCD_EOL_1
    85  02ca  cae102                jp z,_lcd_putchar_eol1
    86  02cd  fe27                  cp LCD_EOL_2
    87  02cf  cae802                jp z,_lcd_putchar_eol2
    88  02d2  fe67                  cp LCD_EOL_3
    89  02d4  caef02                jp z,_lcd_putchar_eol3
    90  02d7  c3f702                jp _lcd_putchar_end
    91                          _lcd_putchar_eol0:
    92  02da  3ec0                  ld a,LCD_SET_DDRAM_ADDR+LCD_LINE_1_ADDR
    93  02dc  cd8002            	call lcd_putcmd
    94  02df  1816                  jr _lcd_putchar_end
    95                          _lcd_putchar_eol1:
    96  02e1  3e94                  ld a,LCD_SET_DDRAM_ADDR+LCD_LINE_2_ADDR
    97  02e3  cd8002            	call lcd_putcmd
    98  02e6  180f                  jr _lcd_putchar_end
    99                          _lcd_putchar_eol2:
   100  02e8  3ed4                  ld a,LCD_SET_DDRAM_ADDR+LCD_LINE_3_ADDR
   101  02ea  cd8002            	call lcd_putcmd
   102  02ed  1808                  jr _lcd_putchar_end
   103                          _lcd_putchar_eol3:
   104  02ef  cd2003                call lcd_scroll
   105  02f2  3ed4                  ld a,LCD_SET_DDRAM_ADDR+LCD_LINE_3_ADDR
   106  02f4  cd8002            	call lcd_putcmd
   107                          _lcd_putchar_end:
   108  02f7  c9                    ret
   109                          
   110  02f8  0000000000000000  ALIGN 0x10
   111                          
   112                          ; transmit character in A to the LCD data port,
   113                          ; return in A the DDRAM address where the character was sent
   114                          lcd_putdata:
   115  0300  c5                    push bc
   116                              ; save the transmit character
   117  0301  47                    ld b,a
   118                          _lcd_putdata_loop:
   119                              ; get the LCD status
   120  0302  db04                  in a,(LCD_CTRL)
   121                              ; busy ?
   122  0304  cb7f                  bit 7,a
   123                              ; yes
   124  0306  20fa                  jr nz,_lcd_putdata_loop
   125                              ; no, reset the 'busy' bit and preserve the DDRAM address
   126  0308  e67f                  and 0b01111111
   127  030a  4f                    ld c,a
   128                              ; restore the transmit character and send it
   129  030b  78                    ld a,b
   130  030c  d305                  out (LCD_DATA),a
   131                              ; restore the DDRAM address
   132  030e  79                    ld a,c
   133  030f  c1                    pop bc
   134  0310  c9                    ret
   135                          
   136  0311  0000000000000000  ALIGN 0x10
              00000000000000    
   137                          
   138                          lcd_scroll:
   139  0320  c5                    push bc
   140  0321  d5                    push de
   141  0322  16c0                  ld d,LCD_SET_DDRAM_ADDR+LCD_LINE_1_ADDR
   142  0324  1e80                  ld e,LCD_SET_DDRAM_ADDR+LCD_LINE_0_ADDR
   143  0326  cd3f03                call _lcd_scroll_line
   144  0329  1694                  ld d,LCD_SET_DDRAM_ADDR+LCD_LINE_2_ADDR
   145  032b  1ec0                  ld e,LCD_SET_DDRAM_ADDR+LCD_LINE_1_ADDR
   146  032d  cd3f03                call _lcd_scroll_line
   147  0330  16d4                  ld d,LCD_SET_DDRAM_ADDR+LCD_LINE_3_ADDR
   148  0332  1e94                  ld e,LCD_SET_DDRAM_ADDR+LCD_LINE_2_ADDR
   149  0334  cd3f03                call _lcd_scroll_line
   150  0337  3ed4                  ld a,LCD_SET_DDRAM_ADDR+LCD_LINE_3_ADDR
   151  0339  cd5803                call _lcd_scroll_clear_line
   152  033c  d1                    pop de
   153  033d  c1                    pop bc
   154  033e  c9                    ret
   155                          _lcd_scroll_line:
   156                              ; b = character counter
   157                              ; c = stash char
   158                              ; d = source line to copy from
   159                              ; e = destination line to copy to
   160  033f  0614                  ld b,LCD_LINE_LEN
   161                          _lcd_scroll_line_loop:
   162                              ; load source
   163  0341  7a                    ld a,d
   164                              ; character counter is an offset
   165  0342  80                    add b
   166                              ; zero based index so -1
   167  0343  3d                    dec a
   168  0344  cd8002                call lcd_putcmd
   169  0347  cd9002                call lcd_getchar
   170                              ; stash the value
   171  034a  4f                    ld c,a
   172                              ; load destination
   173  034b  7b                    ld a,e
   174                              ; character counter is an offset
   175  034c  80                    add b
   176                              ; zero based index so -1
   177  034d  3d                    dec a
   178  034e  cd8002                call lcd_putcmd
   179                              ; recover the stashed value
   180  0351  79                    ld a,c
   181  0352  cd0003                call lcd_putdata
   182  0355  10ea                  djnz _lcd_scroll_line_loop
   183  0357  c9                    ret
   184                          _lcd_scroll_clear_line:
   185                              ; a = destination line to clear
   186                              ; b = character counter
   187  0358  0614                  ld b,LCD_LINE_LEN
   188  035a  cd8002                call lcd_putcmd
   189                          _lcd_scroll_clear_line_loop:
   190  035d  3e20                  ld a,' '
   191  035f  cd0003                call lcd_putdata
   192  0362  10f9                  djnz _lcd_scroll_clear_line_loop
   193  0364  c9                    ret
   194                          
beanboard.asm:
    16                          include "asm/keymatrix.asm"
asm/keymatrix.asm:
     1                          DEBOUNCE_DELAY  equ 0xf0
     2                          
     3                          MOD_KEY_SHIFT   equ 0b00000001
     4                          MOD_KEY_FN      equ 0b00000010
     5                          MOD_KEY_CONTROL equ 0b00000100
     6                          MOD_KEY_ALT     equ 0b00001000
     7                          MOD_KEY_CMD     equ 0b00010000
     8                          
     9  0365  0000000000000000  ALIGN 0x10
              000000            
    10                          
    11                          ; return keyboard char value in A, or 0
    12                          key_readchar:
    13  0370  c5                    push bc
    14  0371  d5                    push de
    15  0372  e5                    push hl
    16                              ; initial row bit - only 1 bit is ever set at a time - it is shifted from bit 0 to bit 7
    17  0373  0601                  ld b,0x01
    18                              ; row counter - 0 => 7
    19  0375  0e00                  ld c,0x00
    20                              ; location of previous values
    21  0377  2110f0                ld hl,KEY_MATRIX_BUFFER
    22  037a  cdb003                call modifierkeys
    23                              ; initialise map pointer
    24  037d  11d503                ld de,QWERTY_KEYMAP_L
    25                              ; shift key down?
    26  0380  e601                  and MOD_KEY_SHIFT
    27  0382  ca8803                jp z,_keyscanloop
    28  0385  111504                ld de,QWERTY_KEYMAP_U
    29                          _keyscanloop:
    30  0388  cda303                call _rowscan
    31                              ; ASCII returned in A, or 0
    32  038b  cdc003                call _colscan
    33  038e  fe00                  cp 0
    34  0390  c29a03                jp nz,_delay
    35                              ; move the pointer of previous values to the next row slot
    36  0393  23                    inc hl
    37                              ; increment row counter
    38  0394  0c                    inc c
    39                              ; clear the carry flag
    40  0395  b7                    or a
    41                              ; shift row bit left - when we've done all 8, it will move to the carry flag
    42  0396  cb10                  rl b
    43                              ; loop if not done all rows
    44  0398  30ee                  jr nc,_keyscanloop
    45                              ; key debounce
    46                          _delay:
    47                              ; set a to the length of the delay
    48  039a  06f0                  ld b,DEBOUNCE_DELAY
    49                          _delayloop:
    50                              ; wait a few cycles
    51  039c  00                    nop
    52                              ; no - loop again
    53  039d  10fd                  djnz _delayloop
    54                          ; end
    55  039f  e1                    pop hl
    56  03a0  d1                    pop de
    57  03a1  c1                    pop bc
    58  03a2  c9                    ret
    59                          
    60                          ; get row bitmap representing new keystrokes:
    61                          ; B contains row bit,
    62                          ; C contains row count,
    63                          ; HL contains a pointer to the old value.
    64                          ; return value in A
    65                          _rowscan:
    66                              ; preserve registers
    67  03a3  d5                    push de
    68                              ; fetch previous value for comparison
    69  03a4  7e                    ld a,(hl)
    70                              ; invert A - we want to check keys becoming closed - so zeroed bits on the previous value are significant
    71  03a5  2f                    cpl
    72                              ; store inverted previous value
    73  03a6  57                    ld d,a
    74                              ; get the current row bit
    75  03a7  78                    ld a,b
    76                              ; output row strobe
    77  03a8  d302                  out (KEYSCAN_OUT),a
    78                              ; get column values
    79  03aa  db03                  in a,(KEYSCAN_IN)
    80                              ; store the new value
    81  03ac  77                    ld (hl),a
    82                              ; newVal AND ~oldVal means bits are set only when the previous bit value was 0
    83  03ad  a2                    and d
    84                              ; restore registers
    85  03ae  d1                    pop de
    86  03af  c9                    ret
    87                          
    88                          ALIGN 0x10
    89                          
    90                          ; return bitmap representing modifier keys in A
    91                          modifierkeys:
    92  03b0  3e10                  ld a,0b00010000 ; row 4
    93                              ; output row strobe
    94  03b2  d302                  out (KEYSCAN_OUT),a
    95                              ; get column values
    96  03b4  db03                  in a,(KEYSCAN_IN)
    97  03b6  e601                  and 0b00000001 ; row 4, bit 0 is SHIFT
    98                              ; left shift modifier
    99  03b8  2003                  jr nz,_modifier_shift
   100                              ; no modifiers
   101  03ba  3e00                  ld a,0
   102  03bc  c9                    ret
   103                          _modifier_shift:
   104  03bd  3e01                  ld a,MOD_KEY_SHIFT
   105  03bf  c9                    ret
   106                          
   107                          ; A contains row bitmap representing new keystrokes,
   108                          ; DE contains a pointer to the ASCII map for the row - which is incremented in the subroutine
   109                          ; first printable character returned in A
   110                          _colscan:
   111                              ; preserve registers
   112  03c0  c5                    push bc
   113                              ; initialise col bit mask - only 1 bit is ever set at a time - it is shifted from bit 0 to bit 7
   114  03c1  0e01                  ld c,0x01
   115                              ; stash the bitmap
   116  03c3  47                    ld b,a
   117                          _colscanloop:
   118                              ; reload the bitmap
   119  03c4  78                    ld a,b
   120                              ; mask the bitmap - use the column mask (C) over the bitmap value in A
   121  03c5  a1                    and c
   122                              ; if zero then no keypress
   123  03c6  2805                  jr z,_colscanloopnext
   124  03c8  1a                    ld a,(de)
   125                              ; ASCII is 0?
   126  03c9  fe00                  cp 0
   127  03cb  2006                  jr nz,_colscanend
   128                          _colscanloopnext:
   129                              ; increment character map pointer
   130  03cd  13                    inc de
   131                              ; clear the carry flag
   132  03ce  b7                    or a
   133                              ; shift row bit left - when we've done all 8, it will move to the carry flag
   134  03cf  cb11                  rl c
   135                              ; loop if not done all rows
   136  03d1  30f1                  jr nc,_colscanloop
   137                          _colscanend:
   138                              ; restore registers
   139  03d3  c1                    pop bc
   140  03d4  c9                    ret
   141                          
   142                          ; define values for control keys
   143                          ; modifiers have zero value
   144                          QWERTY_SHIFT equ 0
   145                          QWERTY_FN equ 0
   146                          QWERTY_CTRL equ 0
   147                          QWERTY_ALT equ 0
   148                          QWERTY_CMD equ 0
   149                          QWERTY_CURS_UP equ 1
   150                          QWERTY_CURS_DOWN equ 2
   151                          QWERTY_CURS_LEFT equ 3
   152                          QWERTY_CURS_RIGHT equ 4
   153                          QWERTY_CAPS equ 5
   154                          
   155                          QWERTY_KEYMAP_L:
   156  03d5  1b71776572747975      db ESC_E,'q','w','e','r','t','y','u','i','o','p',QWERTY_CAPS,ESC_B,'7','8','9'
              696f700508373839  
   157  03e5  096173646667686a      db ESC_T,'a','s','d','f','g','h','j','k','l',';',QUOTE,ESC_N,'4','5','6'
              6b6c3b270a343536  
   158  03f5  007a786376626e6d      db QWERTY_SHIFT,'z','x','c','v','b','n','m',',','.','/',SLASH,QWERTY_CURS_UP,'1','2','3'
              2c2e2f5c01313233  
   159  0405  00000000205b5d20      db QWERTY_FN,QWERTY_CTRL,QWERTY_ALT,QWERTY_CMD,' ','[',']',' ','`','-','=',QWERTY_CURS_LEFT,QWERTY_CURS_DOWN,QWERTY_CURS_RIGHT,'0',ESC_N
              602d3d030204300a  
   160                          QWERTY_KEYMAP_U:
   161  0415  1b51574552545955      db ESC_E,'Q','W','E','R','T','Y','U','I','O','P',QWERTY_CAPS,ESC_B,'&','*','('
              494f500508262a28  
   162  0425  094153444647484a      db ESC_T,'A','S','D','F','G','H','J','K','L',':','"',ESC_N,'$','%','^'
              4b4c3a220a24255e  
   163  0435  005a584356424e4d      db QWERTY_SHIFT,'Z','X','C','V','B','N','M','<','>','?',SLASH,QWERTY_CURS_UP,'!','@','#'
              3c3e3f5c01214023  
   164  0445  00000000207b7d20      db QWERTY_FN,QWERTY_CTRL,QWERTY_ALT,QWERTY_CMD,' ','{','}',' ','~','_','+',QWERTY_CURS_LEFT,QWERTY_CURS_DOWN,QWERTY_CURS_RIGHT,')',ESC_N
              7e5f2b030204290a  
   165                          
beanboard.asm:
    17                          include "asm/messages_small.asm"
asm/messages_small.asm:
     1  0455  0000000000000000  ALIGN 0x10
              000000            
     2                          
     3                          welcome_msg:
     4  0460  5061696e66756c44                  db "PainfulDiodes\n"
              696f6465730a      
     5  046e  4d415256494e205a                  db "MARVIN Z80 monitor\n"
              3830206d6f6e6974  
              6f720a            
     6  0481  76312e320a00                      db "v1.2\n",0
     7                          
     8                          
     9  0487  0000000000000000  ALIGN 0x10
              00                
    10                          
    11                          bad_cmd_msg:
    12  0490  42616420636f6d6d                  db "Bad command\n",0
              616e640a00        
    13                          
    14  049d  000000            ALIGN 0x10
    15                          
    16                          cmd_w_null_msg:
    17  04a0  4e6f20646174610a                  db "No data\n",0
              00                
    18                          
beanboard.asm:
    18                          
