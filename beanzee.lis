beanzee.asm:
     1                          ; MARVIN build for beanzee / Z80 breadboard computer
     2                          ; https://github.com/PainfulDiodes/BeanZee
     3                          
     4                          
     5                          BEANBOARD EQU 0
     6                          
     7                          include "asm/main.inc"
asm/main.inc:
     1                          ; start of user RAM
     2                          RAMSTART equ 0x8000
     3                          ; 8-byte keyscan buffer
     4                          KEYSCAN_BUFFER equ 0xf000
     5                          ; command buffer
     6                          CMD_BUFFER equ 0xf010
     7                          ; this should really be 0x0000 as the CPU will dec SP before PUSH
     8                          STACK equ 0xffff
     9                          
    10                          UM245R_CTRL equ 0 ; serial control port
    11                          UM245R_DATA equ 1 ; serial data port
    12                          KEYSCAN_OUT equ 2 ; either 2 or 3 will work
    13                          KEYSCAN_IN  equ 3 ; either 2 or 3 will work
    14                          LCD_CTRL    equ 4 ; LCD control port
    15                          LCD_DATA    equ 5 ; LCD data port
    16                          GPIO_OUT    equ 6 ; either 6 or 7 will work
    17                          GPIO_IN     equ 7 ; either 6 or 7 will work
    18                          
beanzee.asm:
     8                          include "asm/escapestring.inc"
asm/escapestring.inc:
     1                          ; escape character constants for assembler compatibility
     2                          ; sjasmplus requires double quotes around escape sequences: "\n" and would not interpret '\n' but truncate
     3                          ; z88dk-z80asm requires single quotes around so would correctly interpret '\n' but reject "\n"
     4                          
     5                          ESC_B equ 0x08 ; \b
     6                          ESC_T equ 0x09 ; \t
     7                          ESC_N equ 0x0a ; \n
     8                          ESC_R equ 0x0d ; \r
     9                          ESC_E equ 0x1b ; \e
    10                          SLASH equ 0x5c ; \\
    11                          QUOTE equ 0x27 ; \'
    12                          
beanzee.asm:
     9                          include "asm/HD44780LCD.inc"
asm/HD44780LCD.inc:
     1                          ; LCD commands
     2                          LCD_CLEAR_DISPLAY equ 0x01
     3                          LCD_RETURN_HOME equ 0x02
     4                          LCD_ENTRY_MODE_SET equ 0x04
     5                          LCD_DISPLAY_ON_OFF_CONTROL equ 0x08
     6                          LCD_CURSOR_DISPLAY_SHIFT equ 0x10
     7                          LCD_FUNCTION_SET equ 0x20
     8                          LCD_SET_CGRAM_ADDR equ 0x40
     9                          LCD_SET_DDRAM_ADDR equ 0x80
    10                          
    11                          ; LCD_ENTRY_MODE_SET options
    12                          LCD_ENTRY_INC equ 0x02 ; left
    13                          LCD_ENTRY_DEC equ 0x00 ; right
    14                          LCD_ENTRY_SHIFT equ 0x01
    15                          LCD_ENTRY_NO_SHIFT equ 0x00
    16                          
    17                          ; LCD_DISPLAY_ON_OFF_CONTROL options
    18                          LCD_DISPLAY_ON equ 0x04
    19                          LCD_DISPLAY_OFF equ 0x00
    20                          LCD_CURSOR_ON equ 0x02
    21                          LCD_CURSOR_OFF equ 0x00
    22                          LCD_BLINK_ON equ 0x01
    23                          LCD_BLINK_OFF equ 0x00
    24                          
    25                          ; LCD_CURSOR_DISPLAY_SHIFT options
    26                          LCD_SHIFT_DISPLAY equ 0x08
    27                          LCD_SHIFT_CURSOR equ 0x00
    28                          LCD_SHIFT_RIGHT equ 0x04
    29                          LCD_SHIFT_LEFT equ 0x00
    30                          
    31                          ; LCD_FUNCTION_SET options
    32                          LCD_DATA_LEN_8 equ 0x10
    33                          LCD_DATA_LEN_4 equ 0x00
    34                          LCD_DISP_LINES_2 equ 0x08
    35                          LCD_DISP_LINES_1 equ 0x00
    36                          LCD_FONT_10 equ 0x04
    37                          LCD_FONT_8 equ 0x00
    38                          
    39                          LCD_LINE_LEN equ 0x14
    40                          LCD_NUM_LINES equ 4
    41                          LCD_BUFFER_LEN equ LCD_LINE_LEN*LCD_NUM_LINES
    42                          
    43                          ; LCD_SET_DDRAM_ADDR options
    44                          LCD_LINE_0_ADDR equ 0x00
    45                          LCD_LINE_1_ADDR equ 0x40
    46                          LCD_LINE_2_ADDR equ 0x00+LCD_LINE_LEN
    47                          LCD_LINE_3_ADDR equ 0x40+LCD_LINE_LEN
    48                          LCD_EOL_0 equ 0x00+LCD_LINE_LEN-1
    49                          LCD_EOL_1 equ 0x40+LCD_LINE_LEN-1
    50                          LCD_EOL_2 equ 0x00+LCD_LINE_LEN*2-1
    51                          LCD_EOL_3 equ 0x40+LCD_LINE_LEN*2-1
    52                          
beanzee.asm:
    10                          include "asm/main.asm"
asm/main.asm:
     1                          IFDEF ORGDEF
     2                              ORG ORGDEF
     3                          ELSE
     4                              ORG 0x0000
     5                          ENDIF
     6                          
     7  0000  31ffff                ld sp, STACK
     8                          IF BEANBOARD
     9                              call lcd_init
    10                              call keyscan_init
    11                          ENDIF
    12  0003  c39000                jp start
    13                          
beanzee.asm:
    11                          include "asm/console.asm"
asm/console.asm:
     1  0006  0000000000000000  ALIGN 0x10
              0000              
     2                          
     3                          ; wait for a character and return in A
     4                          getchar:
     5  0010  cd2000                call readchar
     6  0013  fe00                  cp 0
     7  0015  c0                    ret nz
     8  0016  18f8                  jr getchar
     9                          
    10  0018  0000000000000000  ALIGN 0x10
    11                          
    12                          ; read a character from the console and return it,
    13                          ; or 0 if there is no character
    14                          readchar:
    15                          IF BEANBOARD
    16                              ; check keyboard
    17                              call keyscan
    18                              ; is there a character?
    19                              cp 0
    20                              ; yes: return it
    21                              ret nz
    22                              ; no:
    23                          ENDIF
    24                              ; check usb
    25  0020  cd5000                call usb_readchar
    26                              ; return the result - 0 if no char
    27  0023  c9                    ret
    28                          
    29  0024  0000000000000000  ALIGN 0x10
              00000000          
    30                          
    31                          ; sent character in A to the console
    32                          putchar:
    33                          IF BEANBOARD
    34                              ; A is not guaranteed to be preserved in these calls,
    35                              ; so preserve across the first call
    36                              push af
    37                              call lcd_putchar
    38                              pop af
    39                          ENDIF
    40  0030  cd7000                call usb_putchar
    41  0033  c9                    ret
    42                          
    43  0034  0000000000000000  ALIGN 0x10
              00000000          
    44                          
    45                          ; print a zero-terminated string pointed to by hl to the console
    46                          puts:
    47  0040  e5                    push hl
    48                          _puts_loop:
    49                              ; get character from string
    50  0041  7e                    ld a,(hl)
    51                              ; is it zero?
    52  0042  fe00                  cp 0
    53                              ; yes
    54  0044  2807                  jr z, _puts_end
    55                              ; no: send character
    56  0046  cd3000                call putchar
    57                              ; next character position
    58  0049  23                    inc hl
    59                              ; loop for next character
    60  004a  c34100                jp _puts_loop
    61                          _puts_end:
    62  004d  e1                    pop hl
    63  004e  c9                    ret
    64                          
beanzee.asm:
    12                          include "asm/UM245R.asm"
asm/UM245R.asm:
     1                          ; It is assumed that UM245R status signals are gated to the data bus as an IO port where:
     2                          ; /TXE = bit 0
     3                          ; /RXF = bit 1
     4                          ; As per:
     5                          ; https://github.com/PainfulDiodes/z80-breadboard-computer
     6                          ;
     7                          ; line endings are translated:
     8                          ; incoming line endings from the terminal are expected to be \r
     9                          ; and are tranlslated to \n
    10                          ; (\r\n would count as 2 line endings)
    11                          ; and outgoing line endings are sent as \r\n
    12                          ; externally this is consistent with VT100/ANSI terminal behaviour
    13                          ; and internally line endings are always \n
    14                          
    15  004f  00                ALIGN 0x10
    16                          
    17                          ; get character and return in A
    18                          usb_readchar:
    19                              ; get the USB status
    20  0050  db00                  in a,(UM245R_CTRL)
    21                              ; data to read? (active low)
    22  0052  cb4f                  bit 1,a
    23                              ; no, the buffer is empty
    24  0054  2008                  jr nz,_usb_no_char
    25                              ; yes, read the received char
    26  0056  db01                  in a,(UM245R_DATA)
    27                              ; is CR?
    28  0058  fe0d                  cp ESC_R
    29                              ; no:
    30  005a  c0                    ret nz
    31                              ; yes: convert CR to LF
    32  005b  3e0a                  ld a, ESC_N
    33  005d  c9                    ret
    34                          _usb_no_char:
    35  005e  3e00                  ld a,0
    36  0060  c9                    ret
    37                          
    38  0061  0000000000000000  ALIGN 0x10
              00000000000000    
    39                          
    40                          usb_putchar:
    41                              ; newline?
    42  0070  fe0a                  cp ESC_N
    43                              ; no: just send the char
    44  0072  2007                  jr nz,_do_usb_put
    45  0074  3e0d                  ld a, ESC_R
    46  0076  cd7f00                call _usb_put
    47  0079  3e0a                  ld a, ESC_N
    48                          _do_usb_put:
    49  007b  cd7f00                call _usb_put
    50  007e  c9                    ret
    51                          
    52                          ; transmit character in A
    53                          _usb_put:
    54  007f  c5                    push bc
    55                              ; stash the transmit character
    56  0080  47                    ld b,a
    57                          _usb_put_loop:
    58                              ; get the USB status
    59  0081  db00                  in a,(UM245R_CTRL)
    60                              ; ready to transmit? (active low)
    61  0083  cb47                  bit 0,a
    62                              ; no: bit is high
    63  0085  20fa                  jr nz,_usb_put_loop
    64                              ; yes: restore the stashed transmit character
    65  0087  78                    ld a,b
    66                              ; transmit the character
    67  0088  d301                  out (UM245R_DATA),a
    68  008a  c1                    pop bc
    69  008b  c9                    ret
    70                          
beanzee.asm:
    13                          include "asm/marvin.asm"
asm/marvin.asm:
     1                          ; ****************************************************
     2                          ; *  Marvin - a Z80 homebrew monitor program
     3                          ; * (c) Stephen Willcock 2024
     4                          ; * https://github.com/PainfulDiodes
     5                          ; ****************************************************
     6                          
     7                          ; MAIN PROGRAM LOOP
     8                          
     9  008c  00000000          ALIGN 0x10
    10                          
    11                          start:
    12                              ; point DE to zero - this is the default address argument for commands
    13  0090  110000                ld de,0x0000
    14                          
    15  0093  212504                ld hl,welcome_msg
    16  0096  cd4000                call puts
    17                          
    18  0099  00000000000000    ALIGN 0x10
    19                          
    20                          prompt:
    21                              ; point HL to the beginning of the input buffer
    22  00a0  2110f0                ld hl,CMD_BUFFER
    23  00a3  3e3e                  ld a,'>'
    24  00a5  cd3000                call putchar
    25                          
    26                          _get_cmd:
    27                              ; get character from console
    28  00a8  cd1000                call getchar
    29                              ; echo the character to console
    30  00ab  cd3000                call putchar
    31                              ; is CR?
    32  00ae  fe0d                  cp ESC_R
    33                              ; yes: skip this
    34  00b0  28f6                  jr z,_get_cmd
    35                              ; is tab?
    36  00b2  fe09                  cp ESC_T
    37                              ; yes: skip this
    38  00b4  28f2                  jr z,_get_cmd
    39                              ; is space?
    40  00b6  fe20                  cp ' '
    41                              ; yes - skip this
    42  00b8  28ee                  jr z,_get_cmd
    43                              ; escape?
    44  00ba  fe1b                  cp ESC_E
    45                              ; yes
    46  00bc  2808                  jr z, _get_cmd_esc
    47                              ; end of line?
    48  00be  fe0a                  cp ESC_N
    49                              ; yes
    50  00c0  280b                  jr z, _get_cmd_end
    51                              ; no: add character to the buffer
    52  00c2  77                    ld(hl),a
    53                              ; move pointer to next buffer location - we're not checking for overrun
    54  00c3  23                    inc hl
    55                              ; next character
    56  00c4  18e2                  jr _get_cmd
    57                              ; do escape
    58                          _get_cmd_esc:
    59                              ; new line
    60  00c6  3e0a                  ld a,ESC_N
    61  00c8  cd3000                call putchar
    62                              ; back to prompt
    63  00cb  18d3                  jr prompt
    64                          _get_cmd_end:
    65                              ; string terminator
    66  00cd  3e00                  ld a,0
    67                              ; add terminator to end of buffer
    68  00cf  77                    ld(hl),a
    69                          ; process command from buffer
    70                              ; point to start of buffer
    71  00d0  2110f0                ld hl,CMD_BUFFER
    72                              ; load character from buffer
    73  00d3  7e                    ld a,(hl)
    74                              ; end of string?
    75  00d4  fe00                  cp 0
    76                              ; yes - empty line - go back to prompt
    77  00d6  28c8                  jr z,prompt
    78                              ; advance the buffer pointer
    79  00d8  23                    inc hl
    80  00d9  fe72                  cp 'r'
    81  00db  2815                  jr z,_cmd_read
    82  00dd  fe77                  cp 'w'
    83  00df  2847                  jr z,_cmd_write
    84  00e1  fe78                  cp 'x'
    85  00e3  2868                  jr z,_cmd_execute
    86                              ; ':' = load from intel hex format
    87  00e5  fe3a                  cp ':'
    88  00e7  2879                  jr z,_cmd_load
    89                              ; otherwise error
    90  00e9  219604                ld hl,bad_cmd_msg
    91  00ec  cd4000                call puts
    92                              ; loop back to the prompt
    93  00ef  c3a000                jp prompt
    94                          
    95                          ; COMMANDS
    96                          
    97                          ; READ
    98                          ; read bytes from memory and send hex values to console
    99                          _cmd_read:
   100                              ; load character from buffer
   101  00f2  7e                    ld a,(hl)
   102                              ; end of string?
   103  00f3  fe00                  cp 0
   104                              ; yes: no address argument, so skip to read row
   105  00f5  2808                  jr z, _cmd_read_row
   106                              ; parse first pair of characters
   107  00f7  cda001                call hex_byte_val
   108                              ; load into upper byte of memory pointer
   109  00fa  57                    ld d,a
   110                              ; parse second pair of characters
   111  00fb  cda001                call hex_byte_val
   112                              ; load into lower byte of memory pointer
   113  00fe  5f                    ld e,a
   114                          _cmd_read_row:
   115                              ; initialise byte counter - each row will have this many bytes
   116  00ff  0e10                  ld c, 0x10
   117                              ; print DE content: the read address
   118  0101  7a                    ld a,d
   119  0102  cdf001                call putchar_hex
   120  0105  7b                    ld a,e
   121  0106  cdf001                call putchar_hex
   122                              ; separator between address and data
   123  0109  3e3a                  ld a,':'
   124  010b  cd3000                call putchar
   125  010e  3e20                  ld a,' '
   126  0110  cd3000                call putchar
   127                              ; get a byte
   128                          _cmd_read_byte:
   129  0113  1a                    ld a,(de)
   130                              ; and print it
   131  0114  cdf001                call putchar_hex
   132                              ; add space between bytes
   133  0117  3e20                  ld a,' '
   134  0119  cd3000                call putchar
   135                              ; next address
   136  011c  13                    inc de
   137                              ; reduce byte counter
   138                              ; TODO djnz ?
   139  011d  0d                    dec c
   140                              ; repeat if the counter is not 0
   141  011e  20f3                  jr nz, _cmd_read_byte
   142                              ; otherwise, new line
   143  0120  3e0a                  ld a,ESC_N
   144  0122  cd3000                call putchar
   145                              ; and back to prompt
   146  0125  c3a000                jp prompt
   147                          
   148                          ; WRITE
   149                          
   150                          ; write bytes to memory interpreting hex values from console
   151                          _cmd_write:
   152                              ; load character from buffer
   153  0128  7e                    ld a,(hl)
   154                              ; end of string?
   155  0129  fe00                  cp 0
   156                              ; yes: no data
   157  012b  2817                  jr z, _cmd_write_null
   158                              ; parse first pair of characters - address high
   159  012d  cda001                call hex_byte_val
   160                              ; load into upper byte of memory pointer
   161  0130  57                    ld d,a
   162                              ; parse second pair of characters - address low
   163  0131  cda001                call hex_byte_val
   164                              ; load into lower byte of memory pointer
   165  0134  5f                    ld e,a
   166                          _cmd_write_data:
   167                              ; load character from buffer
   168  0135  7e                    ld a,(hl)
   169                              ; end of string?
   170  0136  fe00                  cp 0
   171                              ; yes: we're done
   172  0138  2807                  jr z, _cmd_write_end
   173                              ; parse data byte
   174  013a  cda001                call hex_byte_val
   175                              ; write byte to memory
   176  013d  12                    ld (de),a
   177                              ; advance destination pointer
   178  013e  13                    inc de
   179  013f  18f4                  jr _cmd_write_data
   180                          _cmd_write_end:
   181  0141  c3a000                jp prompt
   182                              ; w with no data
   183                          _cmd_write_null:
   184  0144  21ae04                ld hl,cmd_w_null_msg
   185  0147  cd4000                call puts
   186                              ; and back to prompt
   187  014a  c3a000                jp prompt
   188                          
   189                          ; EXECUTE
   190                          
   191                          ; start executing from given address
   192                          _cmd_execute:
   193                              ; load character from buffer
   194  014d  7e                    ld a,(hl)
   195                              ; end of string?
   196  014e  fe00                  cp 0
   197                              ; yes - no data
   198  0150  ca5e01                jp z, _cmd_exec_df
   199                              ; parse first pair of characters - address high
   200  0153  cda001                call hex_byte_val
   201                              ; load into upper byte of memory pointer
   202  0156  57                    ld d,a
   203                              ; parse second pair of characters - address low
   204  0157  cda001                call hex_byte_val
   205                              ; load into lower byte of memory pointer
   206  015a  5f                    ld e,a
   207  015b  626b                  ld hl,de
   208                              ; execute from address
   209  015d  e9                    jp (hl)
   210                              ; start executing from default address
   211                          _cmd_exec_df:
   212  015e  210080                ld hl,RAMSTART
   213                              ; execute from address
   214  0161  e9                    jp (hl)
   215                          
   216                          ; LOAD
   217                          
   218                          ; load from INTEL HEX - records are read from the buffer
   219                          _cmd_load:
   220                              ; load character from buffer
   221  0162  7e                    ld a,(hl)
   222                              ; end of string?
   223  0163  fe00                  cp 0
   224                              ; yes: no data - quit
   225  0165  ca8e01                jp z, _cmd_load_end
   226                              ; parse first pair of characters - byte count
   227  0168  cda001                call hex_byte_val
   228  016b  fe00                  cp 0
   229                              ; yes - zero byte count - quit
   230  016d  ca8e01                jp z, _cmd_load_end
   231                              ; load byte count into C
   232  0170  4f                    ld c,a
   233                              ; parse address high
   234  0171  cda001                call hex_byte_val
   235                              ; load into upper byte of memory pointer
   236  0174  57                    ld d,a
   237                              ; parse address low
   238  0175  cda001                call hex_byte_val
   239                              ; load into lower byte of memory pointer
   240  0178  5f                    ld e,a
   241                              ; parse record type
   242  0179  cda001                call hex_byte_val
   243                              ; record type zero?
   244  017c  fe00                  cp 0
   245                              ; no: quit
   246  017e  c28e01                jp nz, _cmd_load_end
   247                          _cmd_load_data:
   248                              ; load character from buffer
   249  0181  7e                    ld a,(hl)
   250                              ; end of string?
   251  0182  fe00                  cp 0
   252                              ; yes: we're done
   253  0184  2808                  jr z, _cmd_load_end
   254                              ; no:
   255                              ; parse data byte
   256  0186  cda001                call hex_byte_val
   257                              ; write byte to memory
   258  0189  12                    ld (de),a
   259                              ; advance destination pointer
   260  018a  13                    inc de
   261                              ; decrement byte counter
   262                              ; TODO djnz
   263  018b  0d                    dec c
   264                              ; if byte counter not zero then go again
   265  018c  20f3                  jr nz,_cmd_load_data
   266                          _cmd_load_end:
   267  018e  c3a000                jp prompt
   268                          
beanzee.asm:
    14                          include "asm/strings.asm"
asm/strings.asm:
     1                          ; string subroutines
     2                          
     3  0191  0000000000000000  ALIGN 0x10
              00000000000000    
     4                          
     5                          ; read 2 ASCII hex chars from memory by HL pointer, return converted value in A and advance HL pointer
     6                          hex_byte_val:
     7                              ; preserve BC
     8  01a0  c5                    push bc
     9                              ; load 1st character from memory
    10  01a1  7e                    ld a,(hl)
    11                              ; end of string?
    12  01a2  fe00                  cp 0
    13                              ; yes: no value - return zero
    14  01a4  2819                  jr z,_hex_byte_val_zero
    15                              ; no:
    16                              ; advance the buffer pointer
    17  01a6  23                    inc hl
    18                              ; convert first hex digit
    19  01a7  cdd001                call hex_val
    20                              ; shift left 4 bits to put value into top nibble
    21  01aa  cb27                  sla a
    22  01ac  cb27                  sla a
    23  01ae  cb27                  sla a
    24  01b0  cb27                  sla a
    25                              ; cache the result
    26  01b2  47                    ld b,a
    27                              ; load 2nd character from memory
    28  01b3  7e                    ld a,(hl)
    29                              ; end of string?
    30  01b4  fe00                  cp 0
    31                              ; yes: incomplete byte - return zero
    32  01b6  2807                  jr z,_hex_byte_val_zero
    33                              ; advance the buffer pointer
    34  01b8  23                    inc hl
    35                              ; and convert 2nd hex digit
    36  01b9  cdd001                call hex_val
    37                              ; add first and second digits
    38  01bc  80                    add a,b
    39                              ; restore BC
    40  01bd  c1                    pop bc
    41  01be  c9                    ret
    42                          _hex_byte_val_zero:
    43                              ; zero return value
    44  01bf  3e00                  ld a,0
    45                              ; restore BC
    46  01c1  c1                    pop bc
    47  01c2  c9                    ret
    48                          
    49  01c3  0000000000000000  ALIGN 0x10
              0000000000        
    50                          
    51                          ; convert an ASCII hex char in A to a number value (lower 4 bits)
    52                          hex_val:
    53                              ; is it lowercase alphabetic?
    54  01d0  fe61                  cp 'a'
    55                              ; no: uppercase/numeric
    56  01d2  3803                  jr c,_hex_val_u_n
    57                              ; yes: alphabetic
    58  01d4  d657                  sub 'a'-0x0a
    59  01d6  c9                    ret
    60                          _hex_val_u_n:
    61                              ; is it uppercase alphabetic?
    62  01d7  fe41                  cp 'A'
    63                              ; no: numeric
    64  01d9  3803                  jr c,_hex_val_n
    65                              ; y:
    66  01db  d637                  sub 'A'-0x0a
    67  01dd  c9                    ret
    68                          _hex_val_n:
    69                              ; numeric
    70  01de  d630                  sub '0'
    71  01e0  c9                    ret
    72                          
    73  01e1  0000000000000000  ALIGN 0x10
              00000000000000    
    74                          
    75                          ; convert value in A into an ASCII pair and send to console
    76                          putchar_hex:
    77  01f0  f5                    push af
    78  01f1  c5                    push bc
    79                              ; stash in B
    80  01f2  47                    ld b,a
    81                              ; shift A right x4 e.g. transform 10110010 to 00001011
    82  01f3  cb3f                  srl a
    83  01f5  cb3f                  srl a
    84  01f7  cb3f                  srl a
    85  01f9  cb3f                  srl a
    86                              ; most significant digit
    87  01fb  cd0702                call _putchar_hex_dgt
    88                              ; recover from stash
    89  01fe  78                    ld a,b
    90                              ; clear the top 4 bits
    91  01ff  e60f                  and 0b00001111
    92                              ; least significant digit
    93  0201  cd0702                call _putchar_hex_dgt
    94  0204  c1                    pop bc
    95  0205  f1                    pop af
    96  0206  c9                    ret
    97                          _putchar_hex_dgt:
    98                              ; is it an alpha or numeric?
    99  0207  fe0a                  cp 0x0a
   100                              ; numeric
   101  0209  3806                  jr c,_putchar_hex_n
   102                              ; alpha
   103                              ; for alpha add the base ascii for 'a' but then sub 10 / 0x0a as hex 'a' = 10d
   104  020b  c657                  add a,'a'-0x0a
   105  020d  cd3000                call putchar
   106  0210  c9                    ret
   107                          _putchar_hex_n:
   108                              ; for numeric add the base ascii for '0'
   109  0211  c630                  add a,'0'
   110  0213  cd3000                call putchar
   111  0216  c9                    ret
   112                          
beanzee.asm:
    15                          include "asm/HD44780LCD.asm"
asm/HD44780LCD.asm:
     1                          LCD_COMMAND_0 equ LCD_FUNCTION_SET+LCD_DATA_LEN_8+LCD_DISP_LINES_2+LCD_FONT_8
     2                          LCD_COMMAND_1 equ LCD_DISPLAY_ON_OFF_CONTROL+LCD_DISPLAY_ON+LCD_CURSOR_ON+LCD_BLINK_ON
     3                          
     4  0217  0000000000000000  ALIGN 0x10
              00                
     5                          
     6                          ; initialise LCD
     7                          lcd_init:
     8                          ; preserve registers
     9  0220  f5                    push af
    10                          ; intitialise device
    11  0221  3e38              	ld a,LCD_COMMAND_0
    12  0223  cd4002            	call lcd_putcmd
    13  0226  3e0f              	ld a,LCD_COMMAND_1
    14  0228  cd4002            	call lcd_putcmd
    15  022b  3e01              	ld a,LCD_CLEAR_DISPLAY
    16  022d  cd4002            	call lcd_putcmd
    17  0230  3e00                  ld a,0
    18  0232  cd6002                call lcd_putchar
    19                          ; restore registers
    20  0235  f1                    pop af
    21  0236  c9                    ret
    22                          
    23  0237  0000000000000000  ALIGN 0x10
              00                
    24                          
    25                          ; transmit character in A to the LCD control port
    26                          lcd_putcmd:
    27  0240  c5                    push bc
    28                          ; save the transmit character
    29  0241  47                    ld b,a
    30                          _lcd_putcmd_loop:
    31                          ; get the LCD status
    32  0242  db04                  in a,(LCD_CTRL)
    33                          ; busy ?
    34  0244  cb7f                  bit 7,a
    35                          ; yes
    36  0246  20fa                  jr nz,_lcd_putcmd_loop
    37                          ; no, restore the transmit character
    38  0248  78                    ld a,b
    39                          ; transmit the character
    40  0249  d304                  out (LCD_CTRL),a
    41  024b  c1                    pop bc
    42  024c  c9                    ret
    43                          
    44  024d  000000            ALIGN 0x10
    45                          
    46                          ; get character from LCD data port and return in A
    47                          lcd_getchar:
    48                          ; get the LCD status
    49  0250  db04                  in a,(LCD_CTRL)
    50                          ; busy ?
    51  0252  cb7f                  bit 7,a
    52                          ; yes
    53  0254  20fa                  jr nz,lcd_getchar
    54                          ; no, get a character
    55  0256  db05                  in a,(LCD_DATA)
    56  0258  c9                    ret
    57                          
    58  0259  00000000000000    ALIGN 0x10
    59                          
    60                          ; transmit character in A to the LCD data port
    61                          lcd_putchar:
    62                              ; newline char?
    63  0260  fe0a                  cp ESC_N
    64  0262  c28002                jp nz,_lcd_putchar_printable
    65                              ; newline - fill out the line until EOL
    66                          _lcd_putchar_pad:
    67  0265  3e20                  ld a,' '
    68  0267  cdc002                call lcd_putdata
    69  026a  fe13                  cp LCD_EOL_0
    70  026c  ca9a02                jp z,_lcd_putchar_eol0
    71  026f  fe53                  cp LCD_EOL_1
    72  0271  caa102                jp z,_lcd_putchar_eol1
    73  0274  fe27                  cp LCD_EOL_2
    74  0276  caa802                jp z,_lcd_putchar_eol2
    75  0279  fe67                  cp LCD_EOL_3
    76  027b  caaf02                jp z,_lcd_putchar_eol3
    77                              ; loop until EOL
    78  027e  18e5                  jr _lcd_putchar_pad
    79                          _lcd_putchar_printable:
    80  0280  cdc002                call lcd_putdata
    81                              ; check for overflow - DDRAM address returned in A
    82  0283  fe13                  cp LCD_EOL_0
    83  0285  ca9a02                jp z,_lcd_putchar_eol0
    84  0288  fe53                  cp LCD_EOL_1
    85  028a  caa102                jp z,_lcd_putchar_eol1
    86  028d  fe27                  cp LCD_EOL_2
    87  028f  caa802                jp z,_lcd_putchar_eol2
    88  0292  fe67                  cp LCD_EOL_3
    89  0294  caaf02                jp z,_lcd_putchar_eol3
    90  0297  c3b702                jp _lcd_putchar_end
    91                          _lcd_putchar_eol0:
    92  029a  3ec0                  ld a,LCD_SET_DDRAM_ADDR+LCD_LINE_1_ADDR
    93  029c  cd4002            	call lcd_putcmd
    94  029f  1816                  jr _lcd_putchar_end
    95                          _lcd_putchar_eol1:
    96  02a1  3e94                  ld a,LCD_SET_DDRAM_ADDR+LCD_LINE_2_ADDR
    97  02a3  cd4002            	call lcd_putcmd
    98  02a6  180f                  jr _lcd_putchar_end
    99                          _lcd_putchar_eol2:
   100  02a8  3ed4                  ld a,LCD_SET_DDRAM_ADDR+LCD_LINE_3_ADDR
   101  02aa  cd4002            	call lcd_putcmd
   102  02ad  1808                  jr _lcd_putchar_end
   103                          _lcd_putchar_eol3:
   104  02af  cde002                call lcd_scroll
   105  02b2  3ed4                  ld a,LCD_SET_DDRAM_ADDR+LCD_LINE_3_ADDR
   106  02b4  cd4002            	call lcd_putcmd
   107                          _lcd_putchar_end:
   108  02b7  c9                    ret
   109                          
   110  02b8  0000000000000000  ALIGN 0x10
   111                          
   112                          ; transmit character in A to the LCD data port,
   113                          ; return in A the DDRAM address where the character was sent
   114                          lcd_putdata:
   115  02c0  c5                    push bc
   116                              ; save the transmit character
   117  02c1  47                    ld b,a
   118                          _lcd_putdata_loop:
   119                              ; get the LCD status
   120  02c2  db04                  in a,(LCD_CTRL)
   121                              ; busy ?
   122  02c4  cb7f                  bit 7,a
   123                              ; yes
   124  02c6  20fa                  jr nz,_lcd_putdata_loop
   125                              ; no, reset the 'busy' bit and preserve the DDRAM address
   126  02c8  e67f                  and 0b01111111
   127  02ca  4f                    ld c,a
   128                              ; restore the transmit character and send it
   129  02cb  78                    ld a,b
   130  02cc  d305                  out (LCD_DATA),a
   131                              ; restore the DDRAM address
   132  02ce  79                    ld a,c
   133  02cf  c1                    pop bc
   134  02d0  c9                    ret
   135                          
   136  02d1  0000000000000000  ALIGN 0x10
              00000000000000    
   137                          
   138                          lcd_scroll:
   139  02e0  c5                    push bc
   140  02e1  d5                    push de
   141  02e2  16c0                  ld d,LCD_SET_DDRAM_ADDR+LCD_LINE_1_ADDR
   142  02e4  1e80                  ld e,LCD_SET_DDRAM_ADDR+LCD_LINE_0_ADDR
   143  02e6  cdff02                call _lcd_scroll_line
   144  02e9  1694                  ld d,LCD_SET_DDRAM_ADDR+LCD_LINE_2_ADDR
   145  02eb  1ec0                  ld e,LCD_SET_DDRAM_ADDR+LCD_LINE_1_ADDR
   146  02ed  cdff02                call _lcd_scroll_line
   147  02f0  16d4                  ld d,LCD_SET_DDRAM_ADDR+LCD_LINE_3_ADDR
   148  02f2  1e94                  ld e,LCD_SET_DDRAM_ADDR+LCD_LINE_2_ADDR
   149  02f4  cdff02                call _lcd_scroll_line
   150  02f7  3ed4                  ld a,LCD_SET_DDRAM_ADDR+LCD_LINE_3_ADDR
   151  02f9  cd1803                call _lcd_scroll_clear_line
   152  02fc  d1                    pop de
   153  02fd  c1                    pop bc
   154  02fe  c9                    ret
   155                          _lcd_scroll_line:
   156                              ; b = character counter
   157                              ; c = stash char
   158                              ; d = source line to copy from
   159                              ; e = destination line to copy to
   160  02ff  0614                  ld b,LCD_LINE_LEN
   161                          _lcd_scroll_line_loop:
   162                              ; load source
   163  0301  7a                    ld a,d
   164                              ; character counter is an offset
   165  0302  80                    add b
   166                              ; zero based index so -1
   167  0303  3d                    dec a
   168  0304  cd4002                call lcd_putcmd
   169  0307  cd5002                call lcd_getchar
   170                              ; stash the value
   171  030a  4f                    ld c,a
   172                              ; load destination
   173  030b  7b                    ld a,e
   174                              ; character counter is an offset
   175  030c  80                    add b
   176                              ; zero based index so -1
   177  030d  3d                    dec a
   178  030e  cd4002                call lcd_putcmd
   179                              ; recover the stashed value
   180  0311  79                    ld a,c
   181  0312  cdc002                call lcd_putdata
   182  0315  10ea                  djnz _lcd_scroll_line_loop
   183  0317  c9                    ret
   184                          _lcd_scroll_clear_line:
   185                              ; a = destination line to clear
   186                              ; b = character counter
   187  0318  0614                  ld b,LCD_LINE_LEN
   188  031a  cd4002                call lcd_putcmd
   189                          _lcd_scroll_clear_line_loop:
   190  031d  3e20                  ld a,' '
   191  031f  cdc002                call lcd_putdata
   192  0322  10f9                  djnz _lcd_scroll_clear_line_loop
   193  0324  c9                    ret
   194                          
beanzee.asm:
    16                          include "asm/keyscan.asm"
asm/keyscan.asm:
     1                          DEBOUNCE_DELAY  equ 0xf0
     2                          
     3                          MOD_KEY_SHIFT   equ 0b00000001
     4                          MOD_KEY_FN      equ 0b00000010
     5                          MOD_KEY_CONTROL equ 0b00000100
     6                          MOD_KEY_ALT     equ 0b00001000
     7                          MOD_KEY_CMD     equ 0b00010000
     8                          
     9  0325  0000000000000000  ALIGN 0x10
              000000            
    10                          
    11                          ; initialise keyscan
    12                          keyscan_init:
    13  0330  c5                    push bc
    14  0331  e5                    push hl
    15  0332  0608                  ld b,8
    16  0334  2100f0                ld hl,KEYSCAN_BUFFER
    17                          _keyscan_init_loop:
    18  0337  3600                  ld (hl),0
    19  0339  23                    inc hl
    20  033a  10fb                  djnz _keyscan_init_loop
    21                              ; end
    22  033c  e1                    pop hl
    23  033d  c1                    pop bc
    24  033e  c9                    ret
    25                          
    26  033f  00                ALIGN 0x10
    27                          
    28                          ; return value in A
    29                          keyscan:
    30  0340  c5                    push bc
    31  0341  d5                    push de
    32  0342  e5                    push hl
    33                              ; initial row bit - only 1 bit is ever set at a time - it is shifted from bit 0 to bit 7
    34  0343  0601                  ld b,0x01
    35                              ; row counter - 0 => 7
    36  0345  0e00                  ld c,0x00
    37                              ; location of previous values
    38  0347  2100f0                ld hl,KEYSCAN_BUFFER
    39  034a  cd8003                call _modifierkeys
    40                              ; initialise map pointer
    41  034d  11a503                ld de,QWERTY_KEYMAP_L
    42                              ; shift key down?
    43  0350  e601                  and MOD_KEY_SHIFT
    44  0352  ca5803                jp z,_keyscanloop
    45  0355  11e503                ld de,QWERTY_KEYMAP_U
    46                          _keyscanloop:
    47  0358  cd7303                call _rowscan
    48                              ; ASCII returned in A, or 0
    49  035b  cd9003                call _colscan
    50  035e  fe00                  cp 0
    51  0360  c26a03                jp nz,_delay
    52                              ; move the pointer of previous values to the next row slot
    53  0363  23                    inc hl
    54                              ; increment row counter
    55  0364  0c                    inc c
    56                              ; clear the carry flag
    57  0365  b7                    or a
    58                              ; shift row bit left - when we've done all 8, it will move to the carry flag
    59  0366  cb10                  rl b
    60                              ; loop if not done all rows
    61  0368  30ee                  jr nc,_keyscanloop
    62                              ; key debounce
    63                          _delay:
    64                              ; set a to the length of the delay
    65  036a  06f0                  ld b,DEBOUNCE_DELAY
    66                          _delayloop:
    67                              ; wait a few cycles
    68  036c  00                    nop
    69                              ; no - loop again
    70  036d  10fd                  djnz _delayloop
    71                          ; end
    72  036f  e1                    pop hl
    73  0370  d1                    pop de
    74  0371  c1                    pop bc
    75  0372  c9                    ret
    76                          
    77                          ; get row bitmap representing new keystrokes:
    78                          ; B contains row bit,
    79                          ; C contains row count,
    80                          ; HL contains a pointer to the old value.
    81                          ; return value in A
    82                          _rowscan:
    83                              ; preserve registers
    84  0373  d5                    push de
    85                              ; fetch previous value for comparison
    86  0374  7e                    ld a,(hl)
    87                              ; invert A - we want to check keys becoming closed - so zeroed bits on the previous value are significant
    88  0375  2f                    cpl
    89                              ; store inverted previous value
    90  0376  57                    ld d,a
    91                              ; get the current row bit
    92  0377  78                    ld a,b
    93                              ; output row strobe
    94  0378  d302                  out (KEYSCAN_OUT),a
    95                              ; get column values
    96  037a  db03                  in a,(KEYSCAN_IN)
    97                              ; store the new value
    98  037c  77                    ld (hl),a
    99                              ; newVal AND ~oldVal means bits are set only when the previous bit value was 0
   100  037d  a2                    and d
   101                              ; restore registers
   102  037e  d1                    pop de
   103  037f  c9                    ret
   104                          
   105                          ; get bitmap representing modifier keys:
   106                          ; return value in A
   107                          _modifierkeys:
   108  0380  3e10                  ld a,0b00010000 ; row 4
   109                              ; output row strobe
   110  0382  d302                  out (KEYSCAN_OUT),a
   111                              ; get column values
   112  0384  db03                  in a,(KEYSCAN_IN)
   113  0386  e601                  and 0b00000001 ; row 4, bit 0 is SHIFT
   114                              ; left shift modifier
   115  0388  2003                  jr nz,_modifier_shift
   116                              ; no modifiers
   117  038a  3e00                  ld a,0
   118  038c  c9                    ret
   119                          _modifier_shift:
   120  038d  3e01                  ld a,MOD_KEY_SHIFT
   121  038f  c9                    ret
   122                          
   123                          ; A contains row bitmap representing new keystrokes,
   124                          ; DE contains a pointer to the ASCII map for the row - which is incremented in the subroutine
   125                          ; first printable character returned in A
   126                          _colscan:
   127                              ; preserve registers
   128  0390  c5                    push bc
   129                              ; initialise col bit mask - only 1 bit is ever set at a time - it is shifted from bit 0 to bit 7
   130  0391  0e01                  ld c,0x01
   131                              ; stash the bitmap
   132  0393  47                    ld b,a
   133                          _colscanloop:
   134                              ; reload the bitmap
   135  0394  78                    ld a,b
   136                              ; mask the bitmap - use the column mask (C) over the bitmap value in A
   137  0395  a1                    and c
   138                              ; if zero then no keypress
   139  0396  2805                  jr z,_colscanloopnext
   140  0398  1a                    ld a,(de)
   141                              ; ASCII is 0?
   142  0399  fe00                  cp 0
   143  039b  2006                  jr nz,_colscanend
   144                          _colscanloopnext:
   145                              ; increment character map pointer
   146  039d  13                    inc de
   147                              ; clear the carry flag
   148  039e  b7                    or a
   149                              ; shift row bit left - when we've done all 8, it will move to the carry flag
   150  039f  cb11                  rl c
   151                              ; loop if not done all rows
   152  03a1  30f1                  jr nc,_colscanloop
   153                          _colscanend:
   154                              ; restore registers
   155  03a3  c1                    pop bc
   156  03a4  c9                    ret
   157                          
   158                          ; define values for control keys
   159                          ; modifiers have zero value
   160                          QWERTY_SHIFT equ 0
   161                          QWERTY_FN equ 0
   162                          QWERTY_CTRL equ 0
   163                          QWERTY_ALT equ 0
   164                          QWERTY_CMD equ 0
   165                          QWERTY_CURS_UP equ 1
   166                          QWERTY_CURS_DOWN equ 2
   167                          QWERTY_CURS_LEFT equ 3
   168                          QWERTY_CURS_RIGHT equ 4
   169                          QWERTY_CAPS equ 5
   170                          
   171                          QWERTY_KEYMAP_L:
   172  03a5  1b71776572747975      db ESC_E,'q','w','e','r','t','y','u','i','o','p',QWERTY_CAPS,ESC_B,'7','8','9'
              696f700508373839  
   173  03b5  096173646667686a      db ESC_T,'a','s','d','f','g','h','j','k','l',';',QUOTE,ESC_N,'4','5','6'
              6b6c3b270a343536  
   174  03c5  007a786376626e6d      db QWERTY_SHIFT,'z','x','c','v','b','n','m',',','.','/',SLASH,QWERTY_CURS_UP,'1','2','3'
              2c2e2f5c01313233  
   175  03d5  00000000205b5d20      db QWERTY_FN,QWERTY_CTRL,QWERTY_ALT,QWERTY_CMD,' ','[',']',' ','`','-','=',QWERTY_CURS_LEFT,QWERTY_CURS_DOWN,QWERTY_CURS_RIGHT,'0',ESC_N
              602d3d030204300a  
   176                          QWERTY_KEYMAP_U:
   177  03e5  1b51574552545955      db ESC_E,'Q','W','E','R','T','Y','U','I','O','P',QWERTY_CAPS,ESC_B,'&','*','('
              494f500508262a28  
   178  03f5  094153444647484a      db ESC_T,'A','S','D','F','G','H','J','K','L',':','"',ESC_N,'$','%','^'
              4b4c3a220a24255e  
   179  0405  005a584356424e4d      db QWERTY_SHIFT,'Z','X','C','V','B','N','M','<','>','?',SLASH,QWERTY_CURS_UP,'!','@','#'
              3c3e3f5c01214023  
   180  0415  00000000207b7d20      db QWERTY_FN,QWERTY_CTRL,QWERTY_ALT,QWERTY_CMD,' ','{','}',' ','~','_','+',QWERTY_CURS_LEFT,QWERTY_CURS_DOWN,QWERTY_CURS_RIGHT,')',ESC_N
              7e5f2b030204290a  
   181                          
beanzee.asm:
    17                          include "asm/messages.asm"
asm/messages.asm:
     1                          welcome_msg:
     2  0425  4d415256494e2076                  db "MARVIN v1.1.0\n"
              312e312e300a      
     3  0433  412073696d706c65                  db "A simple Z80 homebrew monitor program\n"
              205a383020686f6d  
              6562726577206d6f  
              6e69746f72207072  
              6f6772616d0a      
     4  0459  2863292053746570                  db "(c) Stephen Willcock 2024\n"
              68656e2057696c6c  
              636f636b20323032  
              340a              
     5  0473  68747470733a2f2f                  db "https://github.com/PainfulDiodes\n\n",0
              6769746875622e63  
              6f6d2f5061696e66  
              756c44696f646573  
              0a0a00            
     6                          
     7                          bad_cmd_msg:
     8  0496  436f6d6d616e6420                  db "Command not recognised\n",0
              6e6f74207265636f  
              676e697365640a00  
     9                          
    10                          cmd_w_null_msg:
    11  04ae  4e6f206461746120                  db "No data to write\n",0
              746f207772697465  
              0a00              
    12                          
beanzee.asm:
    18                          
