beanzee.asm:
     1                          ; MARVIN build for beanzee / Z80 breadboard computer
     2                          ; https://github.com/PainfulDiodes/BeanZee
     3                          
     4                          BEANBOARD EQU 0
     5                          
     6                          IFDEF ORGDEF
     7                              ORG ORGDEF
     8                          ELSE
     9                              ORG 0x0000
    10                          ENDIF
    11                          
    12                          ; start of user RAM
    13                          RAMSTART equ 0x8000
    14                          ; input buffer - start of system RAM
    15                          CMD_BUFFER equ 0xf010
    16                          ; this should really be 0x0000 as the CPU will dec SP before PUSH
    17                          STACK equ 0xffff
    18                          
    19                          UM245R_CTRL equ 0 ; serial control port
    20                          UM245R_DATA equ 1 ; serial data port
    21                          KEYSCAN_OUT equ 2 ; either 2 or 3 will work
    22                          KEYSCAN_IN  equ 3 ; either 2 or 3 will work
    23                          LCD_CTRL    equ 4 ; LCD control port
    24                          LCD_DATA    equ 5 ; LCD data port
    25                          GPIO_OUT    equ 6 ; either 6 or 7 will work
    26                          GPIO_IN     equ 7 ; either 6 or 7 will work
    27                          
    28  0000  31ffff                ld sp, STACK
    29  0003  c39000                jp start
    30                          
    31                          include "asm/escapestring.inc"
asm/escapestring.inc:
     1                          ; escape character constants for assembler compatibility
     2                          ; sjasmplus requires double quotes around escape sequences: "\n" and would not interpret '\n' but truncate
     3                          ; z88dk-z80asm requires single quotes around so would correctly interpret '\n' but reject "\n"
     4                          
     5                          ESC_B equ 0x08 ; \b
     6                          ESC_T equ 0x09 ; \t
     7                          ESC_N equ 0x0a ; \n
     8                          ESC_R equ 0x0d ; \r
     9                          ESC_E equ 0x1b ; \e
    10                          SLASH equ 0x5c ; \\
    11                          QUOTE equ 0x27 ; \'
    12                          
beanzee.asm:
    32                          include "asm/console.asm"
asm/console.asm:
     1  0006  0000000000000000  ALIGN 0x10
              0000              
     2                          
     3                          ; wait for a character and return in A
     4                          getchar:
     5  0010  cd2000                call readchar
     6  0013  fe00                  cp 0
     7  0015  c0                    ret nz
     8  0016  18f8                  jr getchar
     9                          
    10  0018  0000000000000000  ALIGN 0x10
    11                          
    12                          ; read a character from the console and return it,
    13                          ; or 0 if there is no character
    14                          readchar:
    15                          IF BEANBOARD
    16                              ; check keyboard
    17                              call keyscan
    18                              ; is there a character?
    19                              cp 0
    20                              ; yes: return it
    21                              ret nz
    22                              ; no:
    23                          ENDIF
    24                              ; check usb
    25  0020  cd5000                call usb_readchar
    26                              ; return the result - 0 if no char
    27  0023  c9                    ret
    28                          
    29  0024  0000000000000000  ALIGN 0x10
              00000000          
    30                          
    31                          putchar:
    32                          IF BEANBOARD
    33                              ; A is not guaranteed to be preserved in these calls,
    34                              ; so preserve across the first call
    35                              push af
    36                              call lcd_putchar
    37                              pop af
    38                          ENDIF
    39  0030  cd7000                call usb_putchar
    40  0033  c9                    ret
    41                          
    42  0034  0000000000000000  ALIGN 0x10
              00000000          
    43                          
    44                          ; print a zero-terminated string, pointed to by hl
    45                          puts:
    46  0040  e5                    push hl
    47                          _puts_loop:
    48                              ; get character from string
    49  0041  7e                    ld a,(hl)
    50                              ; is it zero?
    51  0042  fe00                  cp 0
    52                              ; yes
    53  0044  2807                  jr z, _puts_end
    54                              ; no: send character
    55  0046  cd3000                call putchar
    56                              ; next character position
    57  0049  23                    inc hl
    58                              ; loop for next character
    59  004a  c34100                jp _puts_loop
    60                          _puts_end:
    61  004d  e1                    pop hl
    62  004e  c9                    ret
    63                          
beanzee.asm:
    33                          include "asm/UM245R.asm"
asm/UM245R.asm:
     1                          ; It is assumed that UM245R status signals are gated to the data bus as an IO port where:
     2                          ; /TXE = bit 0
     3                          ; /RXF = bit 1
     4                          ; As per:
     5                          ; https://github.com/PainfulDiodes/z80-breadboard-computer
     6                          ;
     7                          ; line endings are translated:
     8                          ; incoming line endings from the terminal are expected to be \r
     9                          ; and are tranlslated to \n
    10                          ; (\r\n would count as 2 line endings)
    11                          ; and outgoing line endings are sent as \r\n
    12                          ; externally this is consistent with VT100/ANSI terminal behaviour
    13                          ; and internally line endings are always \n
    14                          
    15  004f  00                ALIGN 0x10
    16                          
    17                          ; get character and return in A
    18                          usb_readchar:
    19                              ; get the USB status
    20  0050  db00                  in a,(UM245R_CTRL)
    21                              ; data to read? (active low)
    22  0052  cb4f                  bit 1,a
    23                              ; no, the buffer is empty
    24  0054  2008                  jr nz,_usb_no_char
    25                              ; yes, read the received char
    26  0056  db01                  in a,(UM245R_DATA)
    27                              ; is CR?
    28  0058  fe0d                  cp ESC_R
    29                              ; no:
    30  005a  c0                    ret nz
    31                              ; yes: convert CR to LF
    32  005b  3e0a                  ld a, ESC_N
    33  005d  c9                    ret
    34                          _usb_no_char:
    35  005e  3e00                  ld a,0
    36  0060  c9                    ret
    37                          
    38  0061  0000000000000000  ALIGN 0x10
              00000000000000    
    39                          
    40                          usb_putchar:
    41                              ; newline?
    42  0070  fe0a                  cp ESC_N
    43                              ; no: just send the char
    44  0072  2007                  jr nz,_do_usb_put
    45  0074  3e0d                  ld a, ESC_R
    46  0076  cd7f00                call _usb_put
    47  0079  3e0a                  ld a, ESC_N
    48                          _do_usb_put:
    49  007b  cd7f00                call _usb_put
    50  007e  c9                    ret
    51                          
    52                          ; transmit character in A
    53                          _usb_put:
    54  007f  c5                    push bc
    55                              ; stash the transmit character
    56  0080  47                    ld b,a
    57                          _usb_put_loop:
    58                              ; get the USB status
    59  0081  db00                  in a,(UM245R_CTRL)
    60                              ; ready to transmit? (active low)
    61  0083  cb47                  bit 0,a
    62                              ; no: bit is high
    63  0085  20fa                  jr nz,_usb_put_loop
    64                              ; yes: restore the stashed transmit character
    65  0087  78                    ld a,b
    66                              ; transmit the character
    67  0088  d301                  out (UM245R_DATA),a
    68  008a  c1                    pop bc
    69  008b  c9                    ret
    70                          
beanzee.asm:
    34                          include "asm/marvin.asm"
asm/marvin.asm:
     1                          ; ****************************************************
     2                          ; *  Marvin - a Z80 homebrew monitor program
     3                          ; * (c) Stephen Willcock 2024
     4                          ; * https://github.com/PainfulDiodes
     5                          ; ****************************************************
     6                          
     7                          ; MAIN PROGRAM LOOP
     8                          
     9  008c  00000000          ALIGN 0x10
    10                          
    11                          start:
    12                              ; point DE to zero - this is the default address argument for commands
    13  0090  110000                ld de,0x0000
    14                          
    15  0093  219101                ld hl,welcome_msg
    16  0096  cd4000                call puts
    17                          
    18  0099  00000000000000    ALIGN 0x10
    19                          
    20                          prompt:
    21                              ; point HL to the beginning of the input buffer
    22  00a0  2110f0                ld hl,CMD_BUFFER
    23  00a3  3e3e                  ld a,'>'
    24  00a5  cd3000                call putchar
    25                          
    26                          _get_cmd:
    27                              ; get character from console
    28  00a8  cd1000                call getchar
    29                              ; echo the character to console
    30  00ab  cd3000                call putchar
    31                              ; is CR?
    32  00ae  fe0d                  cp ESC_R
    33                              ; yes: skip this
    34  00b0  28f6                  jr z,_get_cmd
    35                              ; is tab?
    36  00b2  fe09                  cp ESC_T
    37                              ; yes: skip this
    38  00b4  28f2                  jr z,_get_cmd
    39                              ; is space?
    40  00b6  fe20                  cp ' '
    41                              ; yes - skip this
    42  00b8  28ee                  jr z,_get_cmd
    43                              ; escape?
    44  00ba  fe1b                  cp ESC_E
    45                              ; yes
    46  00bc  2808                  jr z, _get_cmd_esc
    47                              ; end of line?
    48  00be  fe0a                  cp ESC_N
    49                              ; yes
    50  00c0  280b                  jr z, _get_cmd_end
    51                              ; no: add character to the buffer
    52  00c2  77                    ld(hl),a
    53                              ; move pointer to next buffer location - we're not checking for overrun
    54  00c3  23                    inc hl
    55                              ; next character
    56  00c4  18e2                  jr _get_cmd
    57                              ; do escape
    58                          _get_cmd_esc:
    59                              ; new line
    60  00c6  3e0a                  ld a,ESC_N
    61  00c8  cd3000                call putchar
    62                              ; back to prompt
    63  00cb  18d3                  jr prompt
    64                          _get_cmd_end:
    65                              ; string terminator
    66  00cd  3e00                  ld a,0
    67                              ; add terminator to end of buffer
    68  00cf  77                    ld(hl),a
    69                          ; process command from buffer
    70                              ; point to start of buffer
    71  00d0  2110f0                ld hl,CMD_BUFFER
    72                              ; load character from buffer
    73  00d3  7e                    ld a,(hl)
    74                              ; end of string?
    75  00d4  fe00                  cp 0
    76                              ; yes - empty line - go back to prompt
    77  00d6  28c8                  jr z,prompt
    78                              ; advance the buffer pointer
    79  00d8  23                    inc hl
    80  00d9  fe72                  cp 'r'
    81  00db  2815                  jr z,_cmd_read
    82  00dd  fe77                  cp 'w'
    83  00df  2847                  jr z,_cmd_write
    84  00e1  fe78                  cp 'x'
    85  00e3  2868                  jr z,_cmd_execute
    86                              ; ':' = load from intel hex format
    87  00e5  fe3a                  cp ':'
    88  00e7  2879                  jr z,_cmd_load
    89                              ; otherwise error
    90  00e9  210502                ld hl,bad_cmd_msg
    91  00ec  cd4000                call puts
    92                              ; loop back to the prompt
    93  00ef  c3a000                jp prompt
    94                          
    95                          ; COMMANDS
    96                          
    97                          ; READ
    98                          ; read bytes from memory and send hex values to console
    99                          _cmd_read:
   100                              ; load character from buffer
   101  00f2  7e                    ld a,(hl)
   102                              ; end of string?
   103  00f3  fe00                  cp 0
   104                              ; yes: no address argument, so skip to read row
   105  00f5  2808                  jr z, _cmd_read_row
   106                              ; parse first pair of characters
   107  00f7  cd3002                call hex_byte_val
   108                              ; load into upper byte of memory pointer
   109  00fa  57                    ld d,a
   110                              ; parse second pair of characters
   111  00fb  cd3002                call hex_byte_val
   112                              ; load into lower byte of memory pointer
   113  00fe  5f                    ld e,a
   114                          _cmd_read_row:
   115                              ; initialise byte counter - each row will have this many bytes
   116  00ff  0e10                  ld c, 0x10
   117                              ; print DE content: the read address
   118  0101  7a                    ld a,d
   119  0102  cd8002                call putchar_hex
   120  0105  7b                    ld a,e
   121  0106  cd8002                call putchar_hex
   122                              ; separator between address and data
   123  0109  3e3a                  ld a,':'
   124  010b  cd3000                call putchar
   125  010e  3e20                  ld a,' '
   126  0110  cd3000                call putchar
   127                              ; get a byte
   128                          _cmd_read_byte:
   129  0113  1a                    ld a,(de)
   130                              ; and print it
   131  0114  cd8002                call putchar_hex
   132                              ; add space between bytes
   133  0117  3e20                  ld a,' '
   134  0119  cd3000                call putchar
   135                              ; next address
   136  011c  13                    inc de
   137                              ; reduce byte counter
   138                              ; TODO djnz ?
   139  011d  0d                    dec c
   140                              ; repeat if the counter is not 0
   141  011e  20f3                  jr nz, _cmd_read_byte
   142                              ; otherwise, new line
   143  0120  3e0a                  ld a,ESC_N
   144  0122  cd3000                call putchar
   145                              ; and back to prompt
   146  0125  c3a000                jp prompt
   147                          
   148                          ; WRITE
   149                          
   150                          ; write bytes to memory interpreting hex values from console
   151                          _cmd_write:
   152                              ; load character from buffer
   153  0128  7e                    ld a,(hl)
   154                              ; end of string?
   155  0129  fe00                  cp 0
   156                              ; yes: no data
   157  012b  2817                  jr z, _cmd_write_null
   158                              ; parse first pair of characters - address high
   159  012d  cd3002                call hex_byte_val
   160                              ; load into upper byte of memory pointer
   161  0130  57                    ld d,a
   162                              ; parse second pair of characters - address low
   163  0131  cd3002                call hex_byte_val
   164                              ; load into lower byte of memory pointer
   165  0134  5f                    ld e,a
   166                          _cmd_write_data:
   167                              ; load character from buffer
   168  0135  7e                    ld a,(hl)
   169                              ; end of string?
   170  0136  fe00                  cp 0
   171                              ; yes: we're done
   172  0138  2807                  jr z, _cmd_write_end
   173                              ; parse data byte
   174  013a  cd3002                call hex_byte_val
   175                              ; write byte to memory
   176  013d  12                    ld (de),a
   177                              ; advance destination pointer
   178  013e  13                    inc de
   179  013f  18f4                  jr _cmd_write_data
   180                          _cmd_write_end:
   181  0141  c3a000                jp prompt
   182                              ; w with no data
   183                          _cmd_write_null:
   184  0144  211d02                ld hl,cmd_w_null_msg
   185  0147  cd4000                call puts
   186                              ; and back to prompt
   187  014a  c3a000                jp prompt
   188                          
   189                          ; EXECUTE
   190                          
   191                          ; start executing from given address
   192                          _cmd_execute:
   193                              ; load character from buffer
   194  014d  7e                    ld a,(hl)
   195                              ; end of string?
   196  014e  fe00                  cp 0
   197                              ; yes - no data
   198  0150  ca5e01                jp z, _cmd_exec_df
   199                              ; parse first pair of characters - address high
   200  0153  cd3002                call hex_byte_val
   201                              ; load into upper byte of memory pointer
   202  0156  57                    ld d,a
   203                              ; parse second pair of characters - address low
   204  0157  cd3002                call hex_byte_val
   205                              ; load into lower byte of memory pointer
   206  015a  5f                    ld e,a
   207  015b  626b                  ld hl,de
   208                              ; execute from address
   209  015d  e9                    jp (hl)
   210                              ; start executing from default address
   211                          _cmd_exec_df:
   212  015e  210080                ld hl,RAMSTART
   213                              ; execute from address
   214  0161  e9                    jp (hl)
   215                          
   216                          ; LOAD
   217                          
   218                          ; load from INTEL HEX - records are read from the buffer
   219                          _cmd_load:
   220                              ; load character from buffer
   221  0162  7e                    ld a,(hl)
   222                              ; end of string?
   223  0163  fe00                  cp 0
   224                              ; yes: no data - quit
   225  0165  ca8e01                jp z, _cmd_load_end
   226                              ; parse first pair of characters - byte count
   227  0168  cd3002                call hex_byte_val
   228  016b  fe00                  cp 0
   229                              ; yes - zero byte count - quit
   230  016d  ca8e01                jp z, _cmd_load_end
   231                              ; load byte count into C
   232  0170  4f                    ld c,a
   233                              ; parse address high
   234  0171  cd3002                call hex_byte_val
   235                              ; load into upper byte of memory pointer
   236  0174  57                    ld d,a
   237                              ; parse address low
   238  0175  cd3002                call hex_byte_val
   239                              ; load into lower byte of memory pointer
   240  0178  5f                    ld e,a
   241                              ; parse record type
   242  0179  cd3002                call hex_byte_val
   243                              ; record type zero?
   244  017c  fe00                  cp 0
   245                              ; no: quit
   246  017e  c28e01                jp nz, _cmd_load_end
   247                          _cmd_load_data:
   248                              ; load character from buffer
   249  0181  7e                    ld a,(hl)
   250                              ; end of string?
   251  0182  fe00                  cp 0
   252                              ; yes: we're done
   253  0184  2808                  jr z, _cmd_load_end
   254                              ; no:
   255                              ; parse data byte
   256  0186  cd3002                call hex_byte_val
   257                              ; write byte to memory
   258  0189  12                    ld (de),a
   259                              ; advance destination pointer
   260  018a  13                    inc de
   261                              ; decrement byte counter
   262                              ; TODO djnz
   263  018b  0d                    dec c
   264                              ; if byte counter not zero then go again
   265  018c  20f3                  jr nz,_cmd_load_data
   266                          _cmd_load_end:
   267  018e  c3a000                jp prompt
   268                          
beanzee.asm:
    35                          include "asm/messages.asm"
asm/messages.asm:
     1                          welcome_msg:
     2  0191  4d415256494e2076                  db "MARVIN v1.1.beta\n"
              312e312e62657461  
              0a                
     3  01a2  412073696d706c65                  db "A simple Z80 homebrew monitor program\n"
              205a383020686f6d  
              6562726577206d6f  
              6e69746f72207072  
              6f6772616d0a      
     4  01c8  2863292053746570                  db "(c) Stephen Willcock 2024\n"
              68656e2057696c6c  
              636f636b20323032  
              340a              
     5  01e2  68747470733a2f2f                  db "https://github.com/PainfulDiodes\n\n",0
              6769746875622e63  
              6f6d2f5061696e66  
              756c44696f646573  
              0a0a00            
     6                          
     7                          bad_cmd_msg:
     8  0205  436f6d6d616e6420                  db "Command not recognised\n",0
              6e6f74207265636f  
              676e697365640a00  
     9                          
    10                          cmd_w_null_msg:
    11  021d  4e6f206461746120                  db "No data to write\n",0
              746f207772697465  
              0a00              
    12                          
beanzee.asm:
    36                          include "asm/strings.asm"
asm/strings.asm:
     1                          ; string subroutines
     2                          
     3  022f  00                ALIGN 0x10
     4                          
     5                          ; read 2 ASCII hex chars from memory by HL pointer, return converted value in A and advance HL pointer
     6                          hex_byte_val:
     7                              ; preserve BC
     8  0230  c5                    push bc
     9                              ; load 1st character from memory
    10  0231  7e                    ld a,(hl)
    11                              ; end of string?
    12  0232  fe00                  cp 0
    13                              ; yes: no value - return zero
    14  0234  2819                  jr z,_hex_byte_val_zero
    15                              ; no:
    16                              ; advance the buffer pointer
    17  0236  23                    inc hl
    18                              ; convert first hex digit
    19  0237  cd6002                call hex_val
    20                              ; shift left 4 bits to put value into top nibble
    21  023a  cb27                  sla a
    22  023c  cb27                  sla a
    23  023e  cb27                  sla a
    24  0240  cb27                  sla a
    25                              ; cache the result
    26  0242  47                    ld b,a
    27                              ; load 2nd character from memory
    28  0243  7e                    ld a,(hl)
    29                              ; end of string?
    30  0244  fe00                  cp 0
    31                              ; yes: incomplete byte - return zero
    32  0246  2807                  jr z,_hex_byte_val_zero
    33                              ; advance the buffer pointer
    34  0248  23                    inc hl
    35                              ; and convert 2nd hex digit
    36  0249  cd6002                call hex_val
    37                              ; add first and second digits
    38  024c  80                    add a,b
    39                              ; restore BC
    40  024d  c1                    pop bc
    41  024e  c9                    ret
    42                          _hex_byte_val_zero:
    43                              ; zero return value
    44  024f  3e00                  ld a,0
    45                              ; restore BC
    46  0251  c1                    pop bc
    47  0252  c9                    ret
    48                          
    49  0253  0000000000000000  ALIGN 0x10
              0000000000        
    50                          
    51                          ; convert an ASCII hex char in A to a number value (lower 4 bits)
    52                          hex_val:
    53                              ; is it lowercase alphabetic?
    54  0260  fe61                  cp 'a'
    55                              ; no: uppercase/numeric
    56  0262  3803                  jr c,_hex_val_u_n
    57                              ; yes: alphabetic
    58  0264  d657                  sub 'a'-0x0a
    59  0266  c9                    ret
    60                          _hex_val_u_n:
    61                              ; is it uppercase alphabetic?
    62  0267  fe41                  cp 'A'
    63                              ; no: numeric
    64  0269  3803                  jr c,_hex_val_n
    65                              ; y:
    66  026b  d637                  sub 'A'-0x0a
    67  026d  c9                    ret
    68                          _hex_val_n:
    69                              ; numeric
    70  026e  d630                  sub '0'
    71  0270  c9                    ret
    72                          
    73  0271  0000000000000000  ALIGN 0x10
              00000000000000    
    74                          
    75                          ; convert value in A into an ASCII pair and send to console
    76                          putchar_hex:
    77  0280  f5                    push af
    78  0281  c5                    push bc
    79                              ; stash in B
    80  0282  47                    ld b,a
    81                              ; shift A right x4 e.g. transform 10110010 to 00001011
    82  0283  cb3f                  srl a
    83  0285  cb3f                  srl a
    84  0287  cb3f                  srl a
    85  0289  cb3f                  srl a
    86                              ; most significant digit
    87  028b  cd9702                call _putchar_hex_dgt
    88                              ; recover from stash
    89  028e  78                    ld a,b
    90                              ; clear the top 4 bits
    91  028f  e60f                  and 0b00001111
    92                              ; least significant digit
    93  0291  cd9702                call _putchar_hex_dgt
    94  0294  c1                    pop bc
    95  0295  f1                    pop af
    96  0296  c9                    ret
    97                          _putchar_hex_dgt:
    98                              ; is it an alpha or numeric?
    99  0297  fe0a                  cp 0x0a
   100                              ; numeric
   101  0299  3806                  jr c,_putchar_hex_n
   102                              ; alpha
   103                              ; for alpha add the base ascii for 'a' but then sub 10 / 0x0a as hex 'a' = 10d
   104  029b  c657                  add a,'a'-0x0a
   105  029d  cd3000                call putchar
   106  02a0  c9                    ret
   107                          _putchar_hex_n:
   108                              ; for numeric add the base ascii for '0'
   109  02a1  c630                  add a,'0'
   110  02a3  cd3000                call putchar
   111  02a6  c9                    ret
   112                          
beanzee.asm:
    37                          
