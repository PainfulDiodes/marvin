# file opened: beanzee.asm
  1   0000              ; MARVIN build for beanzee / Z80 breadboard computer
  2   0000              ; https://github.com/PainfulDiodes/BeanZee
  3   0000
  4   0000
  5   0000              BEANBOARD EQU 0
  6   0000
  7   0000              include "asm/main.inc"
# file opened: asm/main.inc
  1+  0000              ; start of user RAM
  2+  0000              RAMSTART equ 0x8000
  3+  0000
  4+  0000              ; 8-byte status area
  5+  0000              CONSOLE_STATUS equ 0xf000
  6+  0000              ; 8-byte keyscan buffer
  7+  0000              KEY_MATRIX_BUFFER equ 0xf010
  8+  0000              ; command buffer
  9+  0000              CMD_BUFFER equ 0xf020
 10+  0000              ; this should really be 0x0000 as the CPU will dec SP before PUSH
 11+  0000              STACK equ 0xffff
 12+  0000
 13+  0000              UM245R_CTRL equ 0 ; serial control port
 14+  0000              UM245R_DATA equ 1 ; serial data port
 15+  0000              KEYSCAN_OUT equ 2 ; either 2 or 3 will work
 16+  0000              KEYSCAN_IN  equ 3 ; either 2 or 3 will work
 17+  0000              LCD_CTRL    equ 4 ; LCD control port
 18+  0000              LCD_DATA    equ 5 ; LCD data port
 19+  0000              GPIO_OUT    equ 6 ; either 6 or 7 will work
 20+  0000              GPIO_IN     equ 7 ; either 6 or 7 will work
 21+  0000
 22+  0000              CONSOLE_STATUS_USB equ 1
 23+  0000              CONSOLE_STATUS_BEANBOARD equ 2
 24+  0000
# file closed: asm/main.inc
  8   0000              include "asm/escapestring.inc"
# file opened: asm/escapestring.inc
  1+  0000              ; escape character constants for assembler compatibility
  2+  0000              ; sjasmplus requires double quotes around escape sequences: "\n" and would not interpret '\n' but truncate
  3+  0000              ; z88dk-z80asm requires single quotes around so would correctly interpret '\n' but reject "\n"
  4+  0000
  5+  0000              ESC_B equ 0x08 ; \b
  6+  0000              ESC_T equ 0x09 ; \t
  7+  0000              ESC_N equ 0x0a ; \n
  8+  0000              ESC_R equ 0x0d ; \r
  9+  0000              ESC_E equ 0x1b ; \e
 10+  0000              SLASH equ 0x5c ; \\
 11+  0000              QUOTE equ 0x27 ; \'
 12+  0000
# file closed: asm/escapestring.inc
  9   0000              include "asm/main.asm"
# file opened: asm/main.asm
  1+  0000              ORG 0x0000
  2+  0000 31 FF FF         ld sp, STACK
  3+  0003              IF BEANBOARD
  4+  0003 ~                call lcd_init
  5+  0003 ~                call beanboard_console_init
  6+  0003              ENDIF
  7+  0003 00 00 00...  ALIGN 0x0010 ; fix the warmstart address across targets
  8+  0010              WARMSTART:
  9+  0010 C3 82 00         jp MARVIN
 10+  0013 00 00 00...  ALIGN 0x0010
 11+  0020              WARMSTART2:
 12+  0020 C3 8B 00         jp PROMPT
 13+  0023
# file closed: asm/main.asm
 10   0023              include "asm/console.asm"
# file opened: asm/console.asm
  1+  0023              ; wait for a character and return in A
  2+  0023              getchar:
  3+  0023 CD 2B 00         call readchar
  4+  0026 FE 00            cp 0
  5+  0028 C0               ret nz
  6+  0029 18 F8            jr getchar
  7+  002B
  8+  002B              IF BEANBOARD
  9+  002B ~            ; read a character from the console and return in A - return 0 if there is no character
 10+  002B ~            readchar:
 11+  002B ~                push hl
 12+  002B ~                ld hl,CONSOLE_STATUS
 13+  002B ~                ld a,CONSOLE_STATUS_BEANBOARD
 14+  002B ~                and (hl)
 15+  002B ~                jr nz,_readchar_beanboard
 16+  002B ~                ld a,CONSOLE_STATUS_USB
 17+  002B ~                and (hl)
 18+  002B ~                jr nz,_readchar_usb
 19+  002B ~                jr _readchar_end
 20+  002B ~            _readchar_beanboard:
 21+  002B ~                call key_readchar
 22+  002B ~                jr _readchar_end
 23+  002B ~            _readchar_usb:
 24+  002B ~                call usb_readchar
 25+  002B ~            _readchar_end:
 26+  002B ~                pop hl
 27+  002B ~                ret
 28+  002B              ELSE
 29+  002B              ; read a character from the console and return in A - return 0 if there is no character
 30+  002B              readchar:
 31+  002B CD 46 00         call usb_readchar
 32+  002E C9               ret
 33+  002F              ENDIF
 34+  002F
 35+  002F              IF BEANBOARD
 36+  002F ~            ; sent character in A to the console
 37+  002F ~            putchar:
 38+  002F ~                push hl
 39+  002F ~                push bc
 40+  002F ~                ld b,a
 41+  002F ~                ld hl,CONSOLE_STATUS
 42+  002F ~                ld a,CONSOLE_STATUS_BEANBOARD
 43+  002F ~                and (hl)
 44+  002F ~                jr nz,_putchar_beanboard
 45+  002F ~                ld a,CONSOLE_STATUS_USB
 46+  002F ~                and (hl)
 47+  002F ~                jr nz,_putchar_usb
 48+  002F ~                jr _putchar_end
 49+  002F ~            _putchar_beanboard:
 50+  002F ~                ld a,b
 51+  002F ~                call lcd_putchar
 52+  002F ~                jr _putchar_end
 53+  002F ~            _putchar_usb:
 54+  002F ~                ld a,b
 55+  002F ~                call usb_putchar
 56+  002F ~            _putchar_end:
 57+  002F ~                ld a,b
 58+  002F ~                pop bc
 59+  002F ~                pop hl
 60+  002F ~                ret
 61+  002F              ELSE
 62+  002F              ; sent character in A to the console
 63+  002F              putchar:
 64+  002F C5               push bc
 65+  0030 47               ld b,a
 66+  0031 CD 57 00         call usb_putchar
 67+  0034 78               ld a,b
 68+  0035 C1               pop bc
 69+  0036 C9               ret
 70+  0037              ENDIF
 71+  0037
 72+  0037              ; print a zero-terminated string pointed to by hl to the console
 73+  0037              puts:
 74+  0037 E5               push hl
 75+  0038              _puts_loop:
 76+  0038                  ; get character from string
 77+  0038 7E               ld a,(hl)
 78+  0039                  ; is it zero?
 79+  0039 FE 00            cp 0
 80+  003B                  ; yes
 81+  003B 28 07            jr z, _puts_end
 82+  003D                  ; no: send character
 83+  003D CD 2F 00         call putchar
 84+  0040                  ; next character position
 85+  0040 23               inc hl
 86+  0041                  ; loop for next character
 87+  0041 C3 38 00         jp _puts_loop
 88+  0044              _puts_end:
 89+  0044 E1               pop hl
 90+  0045 C9               ret
 91+  0046
 92+  0046              IF BEANBOARD
 93+  0046 ~            ; determine which console should be active - Reset=beanboard, shift-Reset=USB
 94+  0046 ~            beanboard_console_init:
 95+  0046 ~                ; check for modifier keys being held down
 96+  0046 ~                call modifierkeys
 97+  0046 ~                ; shift key down?
 98+  0046 ~                and MOD_KEY_SHIFT
 99+  0046 ~                ; yes shift
100+  0046 ~                jp nz,_beanboard_console_init_usb
101+  0046 ~                ; no shift
102+  0046 ~                ld a,CONSOLE_STATUS_BEANBOARD
103+  0046 ~                ld hl,CONSOLE_STATUS
104+  0046 ~                ld (hl),a
105+  0046 ~                ret
106+  0046 ~            _beanboard_console_init_usb:
107+  0046 ~                ld a,CONSOLE_STATUS_USB
108+  0046 ~                ld hl,CONSOLE_STATUS
109+  0046 ~                ld (hl),a
110+  0046 ~                ret
111+  0046              ENDIF
# file closed: asm/console.asm
 11   0046              include "asm/UM245R.asm"
# file opened: asm/UM245R.asm
  1+  0046              ; It is assumed that UM245R status signals are gated to the data bus as an IO port where:
  2+  0046              ; /TXE = bit 0
  3+  0046              ; /RXF = bit 1
  4+  0046              ; As per:
  5+  0046              ; https://github.com/PainfulDiodes/z80-breadboard-computer
  6+  0046              ;
  7+  0046              ; line endings are translated:
  8+  0046              ; incoming line endings from the terminal are expected to be \r
  9+  0046              ; and are tranlslated to \n
 10+  0046              ; (\r\n would count as 2 line endings)
 11+  0046              ; and outgoing line endings are sent as \r\n
 12+  0046              ; externally this is consistent with VT100/ANSI terminal behaviour
 13+  0046              ; and internally line endings are always \n
 14+  0046
 15+  0046              ; get character and return in A
 16+  0046              usb_readchar:
 17+  0046                  ; get the USB status
 18+  0046 DB 00            in a,(UM245R_CTRL)
 19+  0048                  ; data to read? (active low)
 20+  0048 CB 4F            bit 1,a
 21+  004A                  ; no, the buffer is empty
 22+  004A 20 08            jr nz,_usb_no_char
 23+  004C                  ; yes, read the received char
 24+  004C DB 01            in a,(UM245R_DATA)
 25+  004E                  ; is CR?
 26+  004E FE 0D            cp ESC_R
 27+  0050                  ; no:
 28+  0050 C0               ret nz
 29+  0051                  ; yes: convert CR to LF
 30+  0051 3E 0A            ld a, ESC_N
 31+  0053 C9               ret
 32+  0054              _usb_no_char:
 33+  0054 3E 00            ld a,0
 34+  0056 C9               ret
 35+  0057
 36+  0057              usb_putchar:
 37+  0057                  ; newline?
 38+  0057 FE 0A            cp ESC_N
 39+  0059                  ; no: just send the char
 40+  0059 20 07            jr nz,_do_usb_put
 41+  005B 3E 0D            ld a, ESC_R
 42+  005D CD 66 00         call _usb_put
 43+  0060 3E 0A            ld a, ESC_N
 44+  0062              _do_usb_put:
 45+  0062 CD 66 00         call _usb_put
 46+  0065 C9               ret
 47+  0066
 48+  0066              ; transmit character in A
 49+  0066              _usb_put:
 50+  0066 C5               push bc
 51+  0067                  ; stash the transmit character
 52+  0067 47               ld b,a
 53+  0068              _usb_put_loop:
 54+  0068                  ; get the USB status
 55+  0068 DB 00            in a,(UM245R_CTRL)
 56+  006A                  ; ready to transmit? (active low)
 57+  006A CB 47            bit 0,a
 58+  006C                  ; no: bit is high
 59+  006C 20 FA            jr nz,_usb_put_loop
 60+  006E                  ; yes: restore the stashed transmit character
 61+  006E 78               ld a,b
 62+  006F                  ; transmit the character
 63+  006F D3 01            out (UM245R_DATA),a
 64+  0071 C1               pop bc
 65+  0072 C9               ret
 66+  0073
 67+  0073              ; print a zero-terminated string pointed to by hl to the USB
 68+  0073              usb_puts:
 69+  0073 E5               push hl
 70+  0074              _usb_puts_loop:
 71+  0074                  ; get character from string
 72+  0074 7E               ld a,(hl)
 73+  0075                  ; is it zero?
 74+  0075 FE 00            cp 0
 75+  0077                  ; yes
 76+  0077 28 07            jr z, _usb_puts_end
 77+  0079                  ; no: send character
 78+  0079 CD 57 00         call usb_putchar
 79+  007C                  ; next character position
 80+  007C 23               inc hl
 81+  007D                  ; loop for next character
 82+  007D C3 74 00         jp _usb_puts_loop
 83+  0080              _usb_puts_end:
 84+  0080 E1               pop hl
 85+  0081 C9               ret
 86+  0082
# file closed: asm/UM245R.asm
 12   0082              include "asm/marvin.asm"
# file opened: asm/marvin.asm
  1+  0082              ; ****************************************************
  2+  0082              ; *  Marvin - a Z80 homebrew monitor program
  3+  0082              ; * (c) Stephen Willcock 2024
  4+  0082              ; * https://github.com/PainfulDiodes
  5+  0082              ; ****************************************************
  6+  0082
  7+  0082              ; MAIN PROGRAM LOOP
  8+  0082
  9+  0082              MARVIN:
 10+  0082                  ; point DE to zero - this is the default address argument for commands
 11+  0082 11 00 00         ld de,0x0000
 12+  0085
 13+  0085 21 D7 01         ld hl,WELCOME_MSG
 14+  0088 CD 37 00         call puts
 15+  008B
 16+  008B              PROMPT:
 17+  008B                  ; point HL to the beginning of the input buffer
 18+  008B 21 20 F0         ld hl,CMD_BUFFER
 19+  008E 3E 3E            ld a,'>'
 20+  0090 CD 2F 00         call putchar
 21+  0093
 22+  0093              _get_cmd:
 23+  0093                  ; get character from console
 24+  0093 CD 23 00         call getchar
 25+  0096                  ; echo the character to console
 26+  0096 CD 2F 00         call putchar
 27+  0099                  ; is CR?
 28+  0099 FE 0D            cp ESC_R
 29+  009B                  ; yes: skip this
 30+  009B 28 F6            jr z,_get_cmd
 31+  009D                  ; is tab?
 32+  009D FE 09            cp ESC_T
 33+  009F                  ; yes: skip this
 34+  009F 28 F2            jr z,_get_cmd
 35+  00A1                  ; is space?
 36+  00A1 FE 20            cp ' '
 37+  00A3                  ; yes - skip this
 38+  00A3 28 EE            jr z,_get_cmd
 39+  00A5                  ; escape?
 40+  00A5 FE 1B            cp ESC_E
 41+  00A7                  ; yes
 42+  00A7 28 08            jr z, _get_cmd_esc
 43+  00A9                  ; end of line?
 44+  00A9 FE 0A            cp ESC_N
 45+  00AB                  ; yes
 46+  00AB 28 0B            jr z, _get_cmd_end
 47+  00AD                  ; no: add character to the buffer
 48+  00AD 77               ld(hl),a
 49+  00AE                  ; move pointer to next buffer location - we're not checking for overrun
 50+  00AE 23               inc hl
 51+  00AF                  ; next character
 52+  00AF 18 E2            jr _get_cmd
 53+  00B1                  ; do escape
 54+  00B1              _get_cmd_esc:
 55+  00B1                  ; new line
 56+  00B1 3E 0A            ld a,ESC_N
 57+  00B3 CD 2F 00         call putchar
 58+  00B6                  ; back to prompt
 59+  00B6 18 D3            jr PROMPT
 60+  00B8              _get_cmd_end:
 61+  00B8                  ; string terminator
 62+  00B8 3E 00            ld a,0
 63+  00BA                  ; add terminator to end of buffer
 64+  00BA 77               ld(hl),a
 65+  00BB              ; process command from buffer
 66+  00BB                  ; point to start of buffer
 67+  00BB 21 20 F0         ld hl,CMD_BUFFER
 68+  00BE                  ; load character from buffer
 69+  00BE 7E               ld a,(hl)
 70+  00BF                  ; end of string?
 71+  00BF FE 00            cp 0
 72+  00C1                  ; yes - empty line - go back to prompt
 73+  00C1 28 C8            jr z,PROMPT
 74+  00C3                  ; advance the buffer pointer
 75+  00C3 23               inc hl
 76+  00C4 FE 72            cp 'r'
 77+  00C6 28 15            jr z,_cmd_read
 78+  00C8 FE 77            cp 'w'
 79+  00CA 28 47            jr z,_cmd_write
 80+  00CC FE 78            cp 'x'
 81+  00CE 28 68            jr z,_cmd_execute
 82+  00D0                  ; ':' = load from intel hex format
 83+  00D0 FE 3A            cp ':'
 84+  00D2 28 79            jr z,_cmd_load
 85+  00D4                  ; otherwise error
 86+  00D4 21 48 02         ld hl,BAD_CMD_MSG
 87+  00D7 CD 37 00         call puts
 88+  00DA                  ; loop back to the prompt
 89+  00DA C3 8B 00         jp PROMPT
 90+  00DD
 91+  00DD              ; COMMANDS
 92+  00DD
 93+  00DD              ; READ
 94+  00DD              ; read bytes from memory and send hex values to console
 95+  00DD              _cmd_read:
 96+  00DD                  ; load character from buffer
 97+  00DD 7E               ld a,(hl)
 98+  00DE                  ; end of string?
 99+  00DE FE 00            cp 0
100+  00E0                  ; yes: no address argument, so skip to read row
101+  00E0 28 08            jr z, _cmd_read_row
102+  00E2                  ; parse first pair of characters
103+  00E2 CD 7C 01         call hex_byte_val
104+  00E5                  ; load into upper byte of memory pointer
105+  00E5 57               ld d,a
106+  00E6                  ; parse second pair of characters
107+  00E6 CD 7C 01         call hex_byte_val
108+  00E9                  ; load into lower byte of memory pointer
109+  00E9 5F               ld e,a
110+  00EA              _cmd_read_row:
111+  00EA                  ; initialise byte counter - each row will have this many bytes
112+  00EA 0E 10            ld c, 0x10
113+  00EC                  ; print DE content: the read address
114+  00EC 7A               ld a,d
115+  00ED CD B0 01         call putchar_hex
116+  00F0 7B               ld a,e
117+  00F1 CD B0 01         call putchar_hex
118+  00F4                  ; separator between address and data
119+  00F4 3E 3A            ld a,':'
120+  00F6 CD 2F 00         call putchar
121+  00F9 3E 20            ld a,' '
122+  00FB CD 2F 00         call putchar
123+  00FE                  ; get a byte
124+  00FE              _cmd_read_byte:
125+  00FE 1A               ld a,(de)
126+  00FF                  ; and print it
127+  00FF CD B0 01         call putchar_hex
128+  0102                  ; add space between bytes
129+  0102 3E 20            ld a,' '
130+  0104 CD 2F 00         call putchar
131+  0107                  ; next address
132+  0107 13               inc de
133+  0108                  ; reduce byte counter
134+  0108                  ; TODO djnz ?
135+  0108 0D               dec c
136+  0109                  ; repeat if the counter is not 0
137+  0109 20 F3            jr nz, _cmd_read_byte
138+  010B                  ; otherwise, new line
139+  010B 3E 0A            ld a,ESC_N
140+  010D CD 2F 00         call putchar
141+  0110                  ; and back to prompt
142+  0110 C3 8B 00         jp PROMPT
143+  0113
144+  0113              ; WRITE
145+  0113
146+  0113              ; write bytes to memory interpreting hex values from console
147+  0113              _cmd_write:
148+  0113                  ; load character from buffer
149+  0113 7E               ld a,(hl)
150+  0114                  ; end of string?
151+  0114 FE 00            cp 0
152+  0116                  ; yes: no data
153+  0116 28 17            jr z, _cmd_write_null
154+  0118                  ; parse first pair of characters - address high
155+  0118 CD 7C 01         call hex_byte_val
156+  011B                  ; load into upper byte of memory pointer
157+  011B 57               ld d,a
158+  011C                  ; parse second pair of characters - address low
159+  011C CD 7C 01         call hex_byte_val
160+  011F                  ; load into lower byte of memory pointer
161+  011F 5F               ld e,a
162+  0120              _cmd_write_data:
163+  0120                  ; load character from buffer
164+  0120 7E               ld a,(hl)
165+  0121                  ; end of string?
166+  0121 FE 00            cp 0
167+  0123                  ; yes: we're done
168+  0123 28 07            jr z, _cmd_write_end
169+  0125                  ; parse data byte
170+  0125 CD 7C 01         call hex_byte_val
171+  0128                  ; write byte to memory
172+  0128 12               ld (de),a
173+  0129                  ; advance destination pointer
174+  0129 13               inc de
175+  012A 18 F4            jr _cmd_write_data
176+  012C              _cmd_write_end:
177+  012C C3 8B 00         jp PROMPT
178+  012F                  ; w with no data
179+  012F              _cmd_write_null:
180+  012F 21 60 02         ld hl,CMD_W_NULL_MSG
181+  0132 CD 37 00         call puts
182+  0135                  ; and back to prompt
183+  0135 C3 8B 00         jp PROMPT
184+  0138
185+  0138              ; EXECUTE
186+  0138
187+  0138              ; start executing from given address
188+  0138              _cmd_execute:
189+  0138                  ; load character from buffer
190+  0138 7E               ld a,(hl)
191+  0139                  ; end of string?
192+  0139 FE 00            cp 0
193+  013B                  ; yes - no data
194+  013B CA 49 01         jp z, _cmd_exec_df
195+  013E                  ; parse first pair of characters - address high
196+  013E CD 7C 01         call hex_byte_val
197+  0141                  ; load into upper byte of memory pointer
198+  0141 57               ld d,a
199+  0142                  ; parse second pair of characters - address low
200+  0142 CD 7C 01         call hex_byte_val
201+  0145                  ; load into lower byte of memory pointer
202+  0145 5F               ld e,a
203+  0146 62 6B            ld hl,de
204+  0148                  ; execute from address
205+  0148 E9               jp (hl)
206+  0149                  ; start executing from default address
207+  0149              _cmd_exec_df:
208+  0149 21 00 80         ld hl,RAMSTART
209+  014C                  ; execute from address
210+  014C E9               jp (hl)
211+  014D
212+  014D              ; LOAD
213+  014D
214+  014D              ; load from INTEL HEX - records are read from the buffer
215+  014D              _cmd_load:
216+  014D                  ; load character from buffer
217+  014D 7E               ld a,(hl)
218+  014E                  ; end of string?
219+  014E FE 00            cp 0
220+  0150                  ; yes: no data - quit
221+  0150 CA 79 01         jp z, _cmd_load_end
222+  0153                  ; parse first pair of characters - byte count
223+  0153 CD 7C 01         call hex_byte_val
224+  0156 FE 00            cp 0
225+  0158                  ; yes - zero byte count - quit
226+  0158 CA 79 01         jp z, _cmd_load_end
227+  015B                  ; load byte count into C
228+  015B 4F               ld c,a
229+  015C                  ; parse address high
230+  015C CD 7C 01         call hex_byte_val
231+  015F                  ; load into upper byte of memory pointer
232+  015F 57               ld d,a
233+  0160                  ; parse address low
234+  0160 CD 7C 01         call hex_byte_val
235+  0163                  ; load into lower byte of memory pointer
236+  0163 5F               ld e,a
237+  0164                  ; parse record type
238+  0164 CD 7C 01         call hex_byte_val
239+  0167                  ; record type zero?
240+  0167 FE 00            cp 0
241+  0169                  ; no: quit
242+  0169 C2 79 01         jp nz, _cmd_load_end
243+  016C              _cmd_load_data:
244+  016C                  ; load character from buffer
245+  016C 7E               ld a,(hl)
246+  016D                  ; end of string?
247+  016D FE 00            cp 0
248+  016F                  ; yes: we're done
249+  016F 28 08            jr z, _cmd_load_end
250+  0171                  ; no:
251+  0171                  ; parse data byte
252+  0171 CD 7C 01         call hex_byte_val
253+  0174                  ; write byte to memory
254+  0174 12               ld (de),a
255+  0175                  ; advance destination pointer
256+  0175 13               inc de
257+  0176                  ; decrement byte counter
258+  0176                  ; TODO djnz
259+  0176 0D               dec c
260+  0177                  ; if byte counter not zero then go again
261+  0177 20 F3            jr nz,_cmd_load_data
262+  0179              _cmd_load_end:
263+  0179 C3 8B 00         jp PROMPT
# file closed: asm/marvin.asm
 13   017C              include "asm/strings.asm"
# file opened: asm/strings.asm
  1+  017C              ; string subroutines
  2+  017C
  3+  017C              ; read 2 ASCII hex chars from memory by HL pointer, return converted value in A and advance HL pointer
  4+  017C              hex_byte_val:
  5+  017C                  ; preserve BC
  6+  017C C5               push bc
  7+  017D                  ; load 1st character from memory
  8+  017D 7E               ld a,(hl)
  9+  017E                  ; end of string?
 10+  017E FE 00            cp 0
 11+  0180                  ; yes: no value - return zero
 12+  0180 28 19            jr z,_hex_byte_val_zero
 13+  0182                  ; no:
 14+  0182                  ; advance the buffer pointer
 15+  0182 23               inc hl
 16+  0183                  ; convert first hex digit
 17+  0183 CD 9F 01         call hex_val
 18+  0186                  ; shift left 4 bits to put value into top nibble
 19+  0186 CB 27            sla a
 20+  0188 CB 27            sla a
 21+  018A CB 27            sla a
 22+  018C CB 27            sla a
 23+  018E                  ; cache the result
 24+  018E 47               ld b,a
 25+  018F                  ; load 2nd character from memory
 26+  018F 7E               ld a,(hl)
 27+  0190                  ; end of string?
 28+  0190 FE 00            cp 0
 29+  0192                  ; yes: incomplete byte - return zero
 30+  0192 28 07            jr z,_hex_byte_val_zero
 31+  0194                  ; advance the buffer pointer
 32+  0194 23               inc hl
 33+  0195                  ; and convert 2nd hex digit
 34+  0195 CD 9F 01         call hex_val
 35+  0198                  ; add first and second digits
 36+  0198 80               add a,b
 37+  0199                  ; restore BC
 38+  0199 C1               pop bc
 39+  019A C9               ret
 40+  019B              _hex_byte_val_zero:
 41+  019B                  ; zero return value
 42+  019B 3E 00            ld a,0
 43+  019D                  ; restore BC
 44+  019D C1               pop bc
 45+  019E C9               ret
 46+  019F
 47+  019F              ; convert an ASCII hex char in A to a number value (lower 4 bits)
 48+  019F              hex_val:
 49+  019F                  ; is it lowercase alphabetic?
 50+  019F FE 61            cp 'a'
 51+  01A1                  ; no: uppercase/numeric
 52+  01A1 38 03            jr c,_hex_val_u_n
 53+  01A3                  ; yes: alphabetic
 54+  01A3 D6 57            sub 'a'-0x0a
 55+  01A5 C9               ret
 56+  01A6              _hex_val_u_n:
 57+  01A6                  ; is it uppercase alphabetic?
 58+  01A6 FE 41            cp 'A'
 59+  01A8                  ; no: numeric
 60+  01A8 38 03            jr c,_hex_val_n
 61+  01AA                  ; y:
 62+  01AA D6 37            sub 'A'-0x0a
 63+  01AC C9               ret
 64+  01AD              _hex_val_n:
 65+  01AD                  ; numeric
 66+  01AD D6 30            sub '0'
 67+  01AF C9               ret
 68+  01B0
 69+  01B0              ; convert value in A into an ASCII pair and send to console
 70+  01B0              putchar_hex:
 71+  01B0 F5               push af
 72+  01B1 C5               push bc
 73+  01B2                  ; stash in B
 74+  01B2 47               ld b,a
 75+  01B3                  ; shift A right x4 e.g. transform 10110010 to 00001011
 76+  01B3 CB 3F            srl a
 77+  01B5 CB 3F            srl a
 78+  01B7 CB 3F            srl a
 79+  01B9 CB 3F            srl a
 80+  01BB                  ; most significant digit
 81+  01BB CD C7 01         call _putchar_hex_dgt
 82+  01BE                  ; recover from stash
 83+  01BE 78               ld a,b
 84+  01BF                  ; clear the top 4 bits
 85+  01BF E6 0F            and 0b00001111
 86+  01C1                  ; least significant digit
 87+  01C1 CD C7 01         call _putchar_hex_dgt
 88+  01C4 C1               pop bc
 89+  01C5 F1               pop af
 90+  01C6 C9               ret
 91+  01C7              _putchar_hex_dgt:
 92+  01C7                  ; is it an alpha or numeric?
 93+  01C7 FE 0A            cp 0x0a
 94+  01C9                  ; numeric
 95+  01C9 38 06            jr c,_putchar_hex_n
 96+  01CB                  ; alpha
 97+  01CB                  ; for alpha add the base ascii for 'a' but then sub 10 / 0x0a as hex 'a' = 10d
 98+  01CB C6 57            add a,'a'-0x0a
 99+  01CD CD 2F 00         call putchar
100+  01D0 C9               ret
101+  01D1              _putchar_hex_n:
102+  01D1                  ; for numeric add the base ascii for '0'
103+  01D1 C6 30            add a,'0'
104+  01D3 CD 2F 00         call putchar
105+  01D6 C9               ret
106+  01D7
# file closed: asm/strings.asm
 14   01D7              include "asm/messages.asm"
# file opened: asm/messages.asm
  1+  01D7              WELCOME_MSG:
  2+  01D7 4D 41 52 56                  db "MARVIN v1.2.1\n"
  2+  01DB 49 4E 20 76
  2+  01DF 31 2E 32 2E
  2+  01E3 31 0A
  3+  01E5 41 20 73 69                  db "A simple Z80 homebrew monitor program\n"
  3+  01E9 6D 70 6C 65
  3+  01ED 20 5A 38 30
  3+  01F1 20 68 6F 6D
  3+  01F5 65 62 72 65
  3+  01F9 77 20 6D 6F
  3+  01FD 6E 69 74 6F
  3+  0201 72 20 70 72
  3+  0205 6F 67 72 61
  3+  0209 6D 0A
  4+  020B 28 63 29 20                  db "(c) Stephen Willcock 2024\n"
  4+  020F 53 74 65 70
  4+  0213 68 65 6E 20
  4+  0217 57 69 6C 6C
  4+  021B 63 6F 63 6B
  4+  021F 20 32 30 32
  4+  0223 34 0A
  5+  0225 68 74 74 70                  db "https://github.com/PainfulDiodes\n\n",0
  5+  0229 73 3A 2F 2F
  5+  022D 67 69 74 68
  5+  0231 75 62 2E 63
  5+  0235 6F 6D 2F 50
  5+  0239 61 69 6E 66
  5+  023D 75 6C 44 69
  5+  0241 6F 64 65 73
  5+  0245 0A 0A 00
  6+  0248
  7+  0248              BAD_CMD_MSG:
  8+  0248 43 6F 6D 6D                  db "Command not recognised\n",0
  8+  024C 61 6E 64 20
  8+  0250 6E 6F 74 20
  8+  0254 72 65 63 6F
  8+  0258 67 6E 69 73
  8+  025C 65 64 0A 00
  9+  0260
 10+  0260              CMD_W_NULL_MSG:
 11+  0260 4E 6F 20 64                  db "No data to write\n",0
 11+  0264 61 74 61 20
 11+  0268 74 6F 20 77
 11+  026C 72 69 74 65
 11+  0270 0A 00
# file closed: asm/messages.asm
# file closed: beanzee.asm

Value    Label
------ - -----------------------------------------------------------
0x01D1   _putchar_hex_n
0x01C7   _putchar_hex_dgt
0x01AD   _hex_val_n
0x01A6   _hex_val_u_n
0x019F   hex_val
0x019B   _hex_byte_val_zero
0x016C   _cmd_load_data
0x0179   _cmd_load_end
0x0149   _cmd_exec_df
0x0260   CMD_W_NULL_MSG
0x012C   _cmd_write_end
0x0120   _cmd_write_data
0x012F   _cmd_write_null
0x00FE   _cmd_read_byte
0x01B0   putchar_hex
0x017C   hex_byte_val
0x00EA   _cmd_read_row
0x0248   BAD_CMD_MSG
0x014D   _cmd_load
0x0138   _cmd_execute
0x0113   _cmd_write
0x00DD   _cmd_read
0x00B8   _get_cmd_end
0x00B1   _get_cmd_esc
0x0093   _get_cmd
0x01D7   WELCOME_MSG
0x0080   _usb_puts_end
0x0074   _usb_puts_loop
0x0073 X usb_puts
0x0068   _usb_put_loop
0x0066   _usb_put
0x0062   _do_usb_put
0x0054   _usb_no_char
0x0044   _puts_end
0x0038   _puts_loop
0x0037   puts
0x0057   usb_putchar
0x002F   putchar
0x0046   usb_readchar
0x002B   readchar
0x0023   getchar
0x008B   PROMPT
0x0020 X WARMSTART2
0x0082   MARVIN
0x0010 X WARMSTART
0x0027 X QUOTE
0x005C X SLASH
0x001B   ESC_E
0x000D   ESC_R
0x000A   ESC_N
0x0009   ESC_T
0x0008 X ESC_B
0x0002 X CONSOLE_STATUS_BEANBOARD
0x0001 X CONSOLE_STATUS_USB
0x0007 X GPIO_IN
0x0006 X GPIO_OUT
0x0005 X LCD_DATA
0x0004 X LCD_CTRL
0x0003 X KEYSCAN_IN
0x0002 X KEYSCAN_OUT
0x0001   UM245R_DATA
0x0000   UM245R_CTRL
0xFFFF   STACK
0xF020   CMD_BUFFER
0xF010 X KEY_MATRIX_BUFFER
0xF000 X CONSOLE_STATUS
0x8000   RAMSTART
0x0000   BEANBOARD
